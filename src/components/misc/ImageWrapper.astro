---
import path from 'node:path'
interface Props {
  id?: string
  src: string
  class?: string
  alt?: string
  position?: string
  basePath?: string
  wave?: boolean
}
import { Image } from 'astro:assets'
import { url } from '../../utils/url-utils'

const {
  id,
  src,
  alt,
  position = 'center',
  basePath = '/',
  wave = false,
} = Astro.props
const className = Astro.props.class

const isLocal = !(
  src.startsWith('/') ||
  src.startsWith('http') ||
  src.startsWith('https') ||
  src.startsWith('data:')
)
const isPublic = src.startsWith('/')

// TODO temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
let img
if (isLocal) {
  const files = import.meta.glob<ImageMetadata>('../../**', {
    import: 'default',
  })
  let normalizedPath = path
    .normalize(path.join('../../', basePath, src))
    .replace(/\\/g, '/')
  const file = files[normalizedPath]
  if (!file) {
    console.error(
      `\n[ERROR] Image file not found: ${normalizedPath.replace('../../', 'src/')}`,
    )
  }
  img = await file()
}

const imageClass = 'w-full h-full object-cover'
const imageStyle = `object-position: ${position}`
---
<div id={id} class:list={[className, 'overflow-hidden relative']}>
    <div class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none"></div>
    {isLocal && img && <Image src={img} alt={alt || ""} class={imageClass} style={imageStyle}/>}
    {!isLocal && <img src={isPublic ? url(src) : src} alt={alt || ""} class={imageClass} style={imageStyle}/>}
    {
      wave && <div class="waves" id="header-waves">
                  <svg
                    class="waves"
                    xmlns="http://www.w3.org/2000/svg"
                    xmlns:xlink="http://www.w3.org/1999/xlink"
                    viewBox="0 24 150 28"
                    preserveAspectRatio="none"
                    shape-rendering="auto"
                  >
                    <defs>
                      <path
                        id="gentle-wave"
                        d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"
                      >
                      </path>
                    </defs>
                    <g class="parallax">
                      <use
                        href="#gentle-wave"
                        x="48"
                        y="0"
                        class="opacity-15"
                        style="animationDelay: -2s; animationDuration: 7s"></use>
                      <use
                        href="#gentle-wave"
                        x="48"
                        y="3"
                        class="opacity-25"
                        style="animationDelay: -3s; animationDuration: 10s"></use>
                      <use
                        href="#gentle-wave"
                        x="48"
                        y="5"
                        class="opacity-50"
                        style="animationDelay: -4s; animationDuration: 13s"></use>
                      <use
                        href="#gentle-wave"
                        x="48"
                        y="7"
                        style="animationDelay: -5s; animationDuration: 20s"></use>
                    </g>
                  </svg>
                </div>
    }
</div>

<style>
  @tailwind components;
  @layer components {
  .waves {
    @apply absolute -bottom-[1px] h-[10vh] max-h-[9.375rem] min-h-[3.125rem] w-full;
    @apply md:h-[15vh];
  }

  .waves > .parallax use {
    @apply fill-[var(--page-bg)];
    animation: wave 25s cubic-bezier(0.5, 0.5, 0.45, 0.5) infinite;
  }

  @keyframes wave {
    0% {
      transform: translate3d(-90px, 0, 0);
    }
    100% {
      transform: translate3d(85px, 0, 0);
    }
  }
}
</style>
