<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux_centos7_study</title>
      <link href="/2021/07/07/linux-centos7-study/"/>
      <url>/2021/07/07/linux-centos7-study/</url>
      
        <content type="html"><![CDATA[<h1 id="前言：Secure-CRT-连接出现过的问题"><a href="#前言：Secure-CRT-连接出现过的问题" class="headerlink" title="前言：Secure CRT 连接出现过的问题"></a>前言：Secure CRT 连接出现过的问题</h1><p>使用 Secure CRT 连接服务器，遇到的一些问题</p><blockquote><p>SecureCRT 连接慢的问题</p></blockquote><p>修改SecureCRT配置目录的Sessions子目录下对应的服务器ini配置文件， GSSAPI Method 设置的值为 none，重启SecureCRT。</p><blockquote><p>连接出现错误 The Semaphore timeout period has expired</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># vi /etc/ssh/sshd_config</span>GG到文件末尾，增加下面2行：ClientAliveInterval <span class="token number">60</span>ClientAliveCountMax <span class="token number">3</span><span class="token comment"># service sshd reload</span>然后就解决问题了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>vim 出现 xxx swap already exist 的问题</p></blockquote><p>这是由于使用 vim 时异常退出导致的问题</p><p>需要删除相应目录下的 <strong>.xxx.swap</strong> 临时文件就好了。</p><blockquote><p>关于有时候重启电脑后主机ping不通虚拟机的问题</p></blockquote><p>这个问题暂时没有明确的解决方法，虽然和虚拟机的相关服务每次开机都会自动启动，但还是无法 ping 虚拟机，可能是在某次开机启动项优化时将相关的服务停止了，现在可行的解决方法如下：</p><p><strong>禁用 VMnet8 然后重启</strong></p><h1 id="一、Linux-常用命令（CentOS-7）"><a href="#一、Linux-常用命令（CentOS-7）" class="headerlink" title="一、Linux 常用命令（CentOS 7）"></a>一、Linux 常用命令（CentOS 7）</h1><ol><li>ifconfig 和 ip addr  —— 查看 ip</li><li>yum install     —— 安装<ul><li>安装 ssh 服务 yum install openssh-server    </li><li>检查ssh服务，yum list install | grep openssh-server</li></ul></li><li>ps -e | grep    —— 查看进程</li><li>service network restart    —— 重启网络服务</li><li>init 0、init 6    —— 关机和重启</li><li>contOS7 开始默认使用 firewalld，它基于 iptables，有 iptables 的核心，但是 iptables 的服务没安装<ul><li>停止防火墙，并禁用 firewalld 服务：sudo systemctl stop firewalld.service</li><li>sudo systemctl disable firewalld.service</li><li>改用 iptables 服务：    sudo yum install iptables-services</li><li>检查状态    service iptables status</li></ul></li><li>开启sshd服务 <strong>systemctl restart sshd , systemctl status sshd</strong> 检查服务状态，或者输入<strong>netstat -an | grep 22</strong>  检查  <strong>22</strong> 号端口是否开启监听，或者 <strong>ps -e | grep sshd</strong></li><li>netstat 常用 ：监听 tcp、udp 端口监听情况 <strong>netstat -tunlp</strong></li><li>复制粘贴（Linux和windows通用） ctrl + insert 和 shift + insert</li><li>传文件，右键选择 connect SFTP Session，输入 put + 文件路径</li></ol><ul><li>pwd：服务器当前目录</li><li>lpwd：Windows当前目录</li><li>ls 和 lls 与上面类似</li><li>cd：改变服务器目录</li><li>lcd：改变本地目录</li><li>Windows向服务器传文件：put 目标文件</li><li>服务器向Windows传文件：get 目标文件</li></ul><ol start="11"><li>解压 tar zxvf 压缩包    压缩 tar zcvf 输出目标.tgz 文件，文件。。。<ul><li>Linux中其他类似命令：zip/unzip和gzip/gunzip等等</li></ul></li><li>正则表达式，最常用的 * ：匹配任意字符 ?：匹配一个字符</li><li>ls    -t 按时间降序排列</li><li>创建目录：mkdir</li><li>mv 目标文件 目录  或者可以改名字 mv 旧文件名 新文件名</li><li>cp 复制 参数 -r 递归复制</li><li>windows下 ping -n 包的个数 ip地址或域名    Linux下 ping -c 包的个数 ip地址或域名</li><li>显示文本文件内容：cat、more、tail<ul><li>cat 显示整个文件内容</li><li>more 分页显示文件内容，空格下一页，b 显示上一页，q 退出</li><li>tail -f 显示文本内容最后几行，对于程序员非常重要，可以动态显示后台服务程序的日志，用于调试和跟踪程序的运行</li></ul></li><li>wc 统计文本文件的行数、单词数和大小</li><li>grep 搜索</li><li>find 搜索</li><li>增加/删除用户组：groupadd 组名    groupdel 组名</li><li>添加/删除用户：useradd -n 用户名 -g 组名 -d 用户主目录<ul><li>userdel 用户名</li></ul></li><li>修改用户密码：passwd [用户名]</li><li>切换用户 su - root</li><li>修改目录和文件所有者和组：chwon [-R] 用户名：组名 目录或文件名列表  <ul><li>-R参数表示处理各级子目录</li></ul></li><li>查看系统磁盘空间：df [-h] [-T]<ul><li>参数 -h 以方便阅读的方式显示， -T 列出文件系统类型</li></ul></li><li>修改主机名 hostname<ul><li>vi /etc/hostname</li></ul></li></ol><h1 id="二、Vim-编辑器"><a href="#二、Vim-编辑器" class="headerlink" title="二、Vim 编辑器"></a>二、Vim 编辑器</h1><p>Vi 编辑器</p><pre><code>命令行模式：  i    进入插入模式  esc    进入命令行模式  :    进入末行模式  a    在当前光标之后进入插入模式  o    在当前光标下一行插入空行  O    在当前光标上一行插入空行  I    在当前光标行首进入插入模式  A    在当前光标行末进入插入模式            Ctrl + u     向上翻半页    Ctrl + d     向下翻半页    nG    移动到第 n 行    Ctrl + g    显示当前所在行数    G    跳到最后一行    ：5    光标跳到第5行    ：n    光标跳到第n行        0    跳到行首    $    跳到行末        w    光标跳到下个单词的开头    b    光标跳到上个单词的开头    e    光标跳到本单词的结尾        x    每按一次，删除光标所在位置的一个字符    nx    如“3x”表示删除光标所在位置开始的3个字符    dw    删除光标所在位置到本单词结尾的字符    D    删除本行光标所在位置后面全部内容        dd    删除光标所在行    ndd    如“3dd”表示删除光标所在位置开始的3行        yy    将光标所在位置的一行复制到缓冲区    nyy    将光标所在位置的n行复制到缓冲区    p    将缓冲区的内容粘贴到光标所在位置        r    替换光标所在位置的一个字符    r = replace    R    从光标所在位置开始替换，直到按下“Esc”    cw    从光标所在位置开始替换单词，知道按下“Esc”        u    撤销命令，可多次撤销    J    将当前行的下一行接到当前行的末尾    /    输入/和要查找的内容，然后 n 表示下一个，N 表示上一个, 撤销高亮输入 :nohl        .    小数点表示重复执行上一次的vi命令    ~    对当前光标所在的字符进行大小写转换    列操作：先按 Ctrl + v 然后 按上下键选择列，选中后按 I 输入内容，最后 Esc    移动光标：h 向左 l 向右  j 向下 k 向上     ：g/aaa/s//bbb/g    全文替换，把aaa替换为bbb        复制 ctrl + insert 粘贴 shift + insert末行模式：    :w    存盘    :w!    强制存盘    :wq    存盘退出    :x    存盘退出    :q    不存盘退出    :q!    不存盘强制退出</code></pre><h1 id="三、makefile-文件"><a href="#三、makefile-文件" class="headerlink" title="三、makefile 文件"></a>三、makefile 文件</h1><pre class="line-numbers language-none"><code class="language-none">在软件的工程中的源文件是很多的，其按照类型、功能、模块分别放在若干个目录和文件中，哪些文件需要编译，那些文件需要后编译，那些文件需要重新编译，甚至进行更复杂的功能操作，这就有了我们的系统编译的工具。在linux和unix中，有一个强大的实用程序，叫make，可以用它来管理多模块程序的编译和链接，直至生成可执行文件。make程序需要一个编译规则说明文件，称为makefile，makefile文件中描述了整个软件工程的编译规则和各个文件之间的依赖关系。makefile就像是一个shell脚本一样，其中可以执行操作系统的命令，它带来的好处就是我们能够实现“自动化编译”，一旦写好，只要一个make命令，整个软件功能就完全自动编译，提高了软件开发的效率。make是一个命令工具，是一个解释makefile中指令的命令工具，一般来说大多数编译器都有这个命令，使用make可以是重新编译的次数达到最小化。一、makefile 的编写makefile文件的规则可以非常复杂，比C程序还要复杂，我通过示例来介绍它的简单用法。文件名：makefile，内容如下：all:book1 book2book1:book1.cgcc -o book1 book1.cbook2:book2.c  _public.h _public.cgcc -o book2 book2.c  _public.cclean:rm -f book1 book2第一行：all：book1 book2all：这是固定的写法，后面跟的是要编译目标程序的清单，中间用空格分开，如果清单很长，可以用 \ 换行第二行：book1: book1.cbook1: 表示需要编译的目标程序如果要编译目标程序book1，需要依赖源程序book1.c，当book1.c的内容发生了变化，执行make的时候就会重新编译book1。第三行：gcc -o book book1.c这是一个编译命令，和在操作系统命令行输入的命令一样，但是要注意一个问题，在gcc之前要用tab键，看上去像8个空格，实际不是，一定要用tab，空格不行。第四行：book2: book2.c  _public.h _public.cbook2表示编译的目标程序。如果要编译目标程序book46，需要依赖源程序book46.c、_public.h和_public.c三个文件，只要任何一个的内容发生了变化，执行make的时候就会重新编译book46。第五行：gcc -o book46 book46.c _public.c第六行：clean：清除目标文件，清除的命令由第十行之后的脚本来执行。第七行：rm  -f  book1 book46清除目标文件的脚本命令，注意了，rm之前也是一个tab键，不是空格。二、make 命令makefile准备好了，在命令提示符下执行 &lt;b&gt;make&lt;/b&gt; 就可以编译makefile中all参数指定的目标文件。执行 make 编译目标程序执行 make clean 执行清除目标文件的指令三、makefile 文件中的变量makefile中，变量就是一个名字，变量的值就是一个文本字符串。在makefile中的目标，依赖，命令或其他地方引用变量时，变量会被它的值替代。CC=gccFLAG=-g all:book1 book46 book1:book1.c        $(CC) $(FLAG) -o book1 book1.c book46:book46.c _public.h _public.c        $(CC) $(FLAG) -o book46 book46.c _public.c clean:        rm -f book1 book46第一行：CC=gcc定义变量CC，赋值gcc第二行：FLAG=-g定义变量，赋值-g第七行：$(CC)  $(FLAG) -o book1 book1.c$(CC)和$(FLAG)就是使用变量CC和FLAG的值，类似于C语言的宏定义，替换后的结果是：gcc -g -o book1 book1.c在makefile文件中，使用变量的好处有两个：1）如果在很多编译指令采用了变量，只要修改变量的值，就相当于修改全部的编译指令；2）把比较长的、公共的编译指令采用变量来表示，可以让makefile更简洁。四、应用经验makefile文件的编写可以很复杂，复杂到我不想看，在实际开发中，用不着那么复杂的makefile，我追求简单实用的方法，腾出更多的时间和精力去做更重要的事情，那些把makefile文件写得很复杂的程序员在我看来是吃饱了撑的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、GDB-常用命令"><a href="#四、GDB-常用命令" class="headerlink" title="四、GDB 常用命令"></a>四、GDB 常用命令</h1><pre class="line-numbers language-none"><code class="language-none">命令命令缩写命令说明set args设置主程序的参数例如：两个程序  /test/book1.c和 ./book1.c设置方法：(gdb) set args /test/book1.c和 gdb book1.cbreakb设置断点，b 20 表示在20行设置断点，可以设置多个断点runr开始运行程序，程序运行到断点处会停止nextn执行当前行语句，如果该语句为函数调用，不会进入函数内部steps执行当前行语句，如果该语句为函数调用，则进入函数执行第一天语句如果函数为库函数或第三方提供的函数，则无法进入printp显示变量值，例如 p name 表示显示变量name的值continuec继续程序的运行，知道遇到下一个断点set var name = value设置变量的值，假设程序有两个变量：int ii 和 char name[21]set var ii = 10 set name = ”测试“而不用strcpyquitq退出 gdb 环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、安装-CentOS-7"><a href="#五、安装-CentOS-7" class="headerlink" title="五、安装 CentOS 7"></a>五、安装 CentOS 7</h1><h2 id="1、安装步骤"><a href="#1、安装步骤" class="headerlink" title="1、安装步骤"></a>1、安装步骤</h2><p>首先正常安装，然后执行以下三个步骤：</p><blockquote><p>修改 CentOS 7 的字符集</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span><span class="token string">"zh_CN.gbk"</span> <span class="token operator">&gt;</span> /etc/locale.conf然后让其立即生效<span class="token builtin class-name">source</span> /etc/locale.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>启用网卡</p></blockquote><p>打开 ens33 网卡的配置文件 <code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>，把 <strong>NOBOOT</strong> 参数修改为 yes。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes <span class="token operator">&gt;&gt;</span> /etc/sysconfig/network-scripts/ifcfg-ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>修改 CentOS 7 的时间</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">date</span> -s <span class="token string">"2021/03/12 21:22:00"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2、Linux-常用命令"><a href="#2、Linux-常用命令" class="headerlink" title="2、Linux 常用命令"></a>2、Linux 常用命令</h2><ul><li>重启： <code>init 6 或者 reboot</code></li><li>关机：<code>init 0 或者 halt</code></li></ul><blockquote><p>时间操作：</p></blockquote><ul><li><p>查看时间 <code>date</code></p></li><li><p>设置时间为中国上海时间  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">cp</span> /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置时间格式</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">date</span> -s <span class="token string">"yyyy-mm-dd hh:mi:ss"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>目录操作：</p></blockquote><ul><li><p>删除目录和文件：<code>rm [-rf] 目录或文件列表</code></p></li><li><p>移动目录或文件：<code>mv 旧目录或文件名 新目录或文件名</code> 也可以重命名</p></li><li><p>复制目录或文件：<code>cp [-r] 旧目录或文件名 新目录或文件名</code></p></li></ul><p>打包压缩与解压缩：</p><ul><li>打包压缩的语法：<code>tar zcvf 压缩包文件名 目录或文件名列表</code></li><li>解包解压的语法：<code>tar zxvf 压缩包文件名</code></li></ul><blockquote><p>判断网络是否连通：</p></blockquote><ul><li>Windows系统：<code>ping -n 包的个数 ip地址或域名</code></li><li>Linux系统：<code>ping -c 包的个数 ip地址或域名</code></li></ul><blockquote><p>搜索文件中的内容</p></blockquote><p><code>grep "内容" 文件名</code></p><p>注意，如果内容中没有空格等特殊字符，可以不用双引号括起来。</p><p>可以使用通配符</p><blockquote><p>搜索文件</p></blockquote><p><code>find 目录名 -name 文件名 -print</code></p><p>参数说明：</p><p>目录名：待搜索的目录，搜索文件的时候，除了这个目录名，还包括它的各级子目录。</p><p>文件名：待搜索的文件名匹配的规则。</p><p>示例：</p><p>1）从/tmp目录开始搜索，把全部的*.c文件显示出来。</p><p>find /tmp -name *.c -print</p><p>2）从当前工作目录开始搜索，把全部的*.c文件显示出来。</p><p>find . -name *.c -print</p><blockquote><p>增加/删除用户组</p></blockquote><ul><li>增加用户组：<code>groupadd 组名</code></li><li>删除用户组：<code>groupdel 组名</code></li></ul><blockquote><p>增加/删除用户&amp;修改用户密码</p></blockquote><ul><li><p>增加用户：<code>useradd -n 用户名 -g 组名 -d 用户的主目录</code></p></li><li><p>删除用户：<code>userdel 用户名</code></p></li><li><p>修改用户密码：<code>passwd [用户名]</code></p><p>修改用户的密码，按提示两次输入新密码，如果两次输入的密码相同就修改成功。</p><p>普通用户只能修改自己的密码，只输入passwd就可以了，不能指定用户名。</p><p>系统管理员可以修改任何用户的密码，passwd后需要指定用户名。</p></li></ul><blockquote><p>修改目录和文件的所有者和组</p></blockquote><p><code>chown [-R] 用户名:组名 目录或文件名列表</code></p><p>chown将目录或文件的拥有者修改为参数指定的用户名和组，目录或文件名列表用空格分隔。</p><p>-R 选项表示处理各及子目录。</p><blockquote><p>查看系统磁盘空间</p></blockquote><p><code>df [-h] [-T]</code></p><p>选项-h 以方便阅读的方式显示信息。</p><p>选项-T 列出文件系统类型。</p><h1 id="六、CentOS-7-设置环境变量"><a href="#六、CentOS-7-设置环境变量" class="headerlink" title="六、CentOS 7 设置环境变量"></a>六、CentOS 7 设置环境变量</h1><h2 id="1、环境变量的含义"><a href="#1、环境变量的含义" class="headerlink" title="1、环境变量的含义"></a>1、环境变量的含义</h2><p>程序（操作系统命令和应用程序）的执行都需要运行环境，这个环境是由多个环境变量组成的。</p><h2 id="2、环境变量的分类"><a href="#2、环境变量的分类" class="headerlink" title="2、环境变量的分类"></a>2、环境变量的分类</h2><ul><li>按生效的范围分类<ul><li><strong>系统环境变量</strong>：公共的，对全部的用户都生效。</li><li><strong>用户环境变量</strong>：用户私有的、自定义的个性化设置，只对该用户生效。</li></ul></li><li>按生存周期分类<ul><li><strong>永久环境变量</strong>：在环境变量脚本文件中配置，用户每次登录时会自动执行这些脚本，相当于永久生效。</li><li><strong>临时环境变量</strong>：使用时在Shell中临时定义，退出Shell后失效。</li></ul></li></ul><h2 id="3、Linux-环境变量"><a href="#3、Linux-环境变量" class="headerlink" title="3、Linux 环境变量"></a>3、Linux 环境变量</h2><p>Linux环境变量也称之为Shell环境变量，以下划线和字母打头，由下划线、字母（区分大小写）和数字组成，习惯上使用大写字母，例如 PATH、HOSTNAME、LANG 等。</p><h2 id="4、常用的环境变量"><a href="#4、常用的环境变量" class="headerlink" title="4、常用的环境变量"></a>4、常用的环境变量</h2><blockquote><p>查看环境变量</p></blockquote><p><code>env 命令</code>：</p><p>在 Shell 下，用 env 命令查看当前用户全部的环境变量。</p><p>用 env 命令的时候，满屏显示了很多环境变量，不方便查看，可以用 grep 筛选。</p><p><code>env | grep 环境变量名</code>:</p><p>例如查看环境变量名中包含PATH的环境变量。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">env</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token environment constant">PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>echo 命令</code>:</p><p>echo $环境变量名</p><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">echo $LANG<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>常用的环境变量</p></blockquote><ul><li><p>PATH</p><p>可执行程序的搜索目录，可执行程序包括 Linux 系统命令和用户的应用程序</p></li><li><p>LANG</p><p>Linux系统的语言、地区、字符集</p></li><li><p>HOSTNAME</p><p>服务器的主机名。</p></li><li><p>SHELL</p><p>用户当前使用的Shell解析器。</p></li><li><p>HISTSIZE</p><p>保存历史命令的数目。</p></li><li><p>USER</p><p>当前登录用户的用户名。</p></li><li><p>HOME</p><p>当前登录用户的主目录。</p></li><li><p>PWD</p><p>当前工作目录。</p></li><li><p>LD_LIBRARY_PATH</p><p>C/C++语言动态链接库文件搜索的目录，它不是 Linux 缺省的环境变量，但对C/C++程序员来说非常重要</p></li><li><p>CLASSPATH</p><p><strong>JAVA 语言库文件搜索的目录，它也不是 Linux 缺省的环境变量，但对JAVA程序员来说非常重要</strong></p></li></ul><h2 id="5、设置环境变量"><a href="#5、设置环境变量" class="headerlink" title="5、设置环境变量"></a>5、设置环境变量</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">变量名<span class="token operator">=</span><span class="token string">'值'</span><span class="token builtin class-name">export</span> 变量名或者<span class="token builtin class-name">export</span> 变量名<span class="token operator">=</span><span class="token string">'值'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果环境变量的值没有空格等特殊符号，可以不用单引号包含。</p><p>示例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">ORACLE_HOME</span><span class="token operator">=</span>/oracle/homeexport <span class="token assign-left variable">ORACLE_BASE</span><span class="token operator">=</span>/oracle/baseexport <span class="token assign-left variable">ORACLE_SID</span><span class="token operator">=</span>snorcl11gexport <span class="token assign-left variable">NLS_LANG</span><span class="token operator">=</span><span class="token string">'Simplified Chinese_China.ZHS16GBK'</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token environment constant">$HOME</span>/bin:<span class="token variable">$ORACLE_HOME</span>/bin:.export <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token variable">$LD_LIBRARY_PATH</span><span class="token builtin class-name">:</span><span class="token variable">$ORACLE_HOME</span>/lib:.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>采用export设置的环境变量，在退出 Shell 后就会失效，下次登录时需要重新设置。如果希望环境变量永久生效，需要在登录脚本文件中配置。</p><blockquote><p>系统环境变量</p></blockquote><p>系统环境变量对全部的用户生效，设置系统环境变量有三种方法。</p><ul><li><p>在 <code>/etc/profile</code> 文件中设置。</p><p>用户登录时执行 /etc/profile 文件中设置系统的环境变量。但是，Linux不建议在/etc/profile文件中设置系统环境变量。</p></li><li><p>在 <code>/etc/profile.d</code> 目录中增加环境变量脚本文件，这是Linux推荐的方法。（推荐使用）</p><p>/etc/profile在每次启动时会执行 /etc/profile.d下全部的脚本文件。/etc/profile.d 比 /etc/profile 好维护，不想要什么变量直接删除 /etc/profile.d下对应的 <strong>shell 脚本</strong>即可。</p></li><li><p>在 <code>/etc/bashrc</code> 文件中设置环境变量。</p><p>该文件配置的环境变量将会影响全部用户使用的bash shell。但是，Linux也不建议在/etc/bashrc文件中设置系统环境变量。</p></li></ul><blockquote><p>用户环境变量</p></blockquote><p>用户环境变量只对当前用户生效，设置用户环境变量也有多种方法。</p><p>在用户的主目录，有几个特别的文件，用 ls 是看不见的，用 <strong>ls .bash_</strong>* 可以看见。</p><p>例如：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ls</span> /root/.bash_*ls /home/naivekyo/.bash_*可以查出来几个特别的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>.bash_profile</code>（推荐首选）</p><p>当用户登录时执行，每个用户都可以使用该文件来配置专属于自己的环境变量。</p></li><li><p><code>.bashrc</code></p><p>当用户登录时以及每次打开新的 Shell 时该文件都将被读取，不推荐在里面配置用户专用的环境变量，因为每开一个Shell，该文件都会被读取一次，效率肯定受影响。</p></li><li><p><code>.bash_logout</code></p><p>当每次退出系统（退出bash shell）时执行该文件。</p></li><li><p><code>.bash_history</code></p><p>保存了当前用户使用过的历史命令。</p></li></ul><blockquote><p>环境变量脚本执行的顺序</p></blockquote><p>环境变量脚本文件的执行顺序如下：</p><pre class="line-numbers language-none"><code class="language-none">/etc/profile -&gt; /etc/profile.d -&gt; /etc/bashrc -&gt; 用户的.bash_profile -&gt; 用户的.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同名的环境变量，如果在多个脚本中有配置，以最后执行的脚本中的配置为准。</p><p>还有一个问题需要注意，在/etc/profile中执行了/etc/profile.d的脚本，代码如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> /etc/profile.d/*.sh <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -r <span class="token string">"<span class="token variable">$i</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${-<span class="token operator">#</span>*i}</span>"</span> <span class="token operator">!=</span> <span class="token string">"$-"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token builtin class-name">.</span> <span class="token string">"<span class="token variable">$i</span>"</span>        <span class="token keyword">else</span>            <span class="token builtin class-name">.</span> <span class="token string">"<span class="token variable">$i</span>"</span> <span class="token operator">&gt;</span>/dev/null        <span class="token keyword">fi</span>    fidone<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以，/etc/profile.d 和 /etc/profile 的执行顺序还要看代码怎么写。</p><h2 id="6、重要环境变量详解"><a href="#6、重要环境变量详解" class="headerlink" title="6、重要环境变量详解"></a>6、重要环境变量详解</h2><blockquote><p>1、PATH 环境变量</p></blockquote><p>可执行程序的搜索目录，可执行程序包括 Linux 系统命令和用户的应用程序。如果可执行程序的目录不在 PATH 指定的目录中，执行时需要指定目录。</p><ul><li><p>PATH环境变量存放的是目录列表，目录之间用冒号 : 分隔，最后的圆点 . 表示当前目录。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>目录1:目录2:目录3:<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>目录n:.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>PATH 缺省包含了 Linux 系统命令所在的目录（/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin），如果不包含这些目录，Linux的常用命令也无法执行（要输入绝对路径才能执行）。</p></li><li><p>在用户的 .bash_profile 文件中，会对PATH进行扩充，如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token environment constant">$HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果PATH变量中没有包含<strong>圆点</strong>.，执行当前目录下的程序需要加./或使用绝对路径。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 没有圆点</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/bin<span class="token comment"># 执行该目录下的命令时需要使用 ./ 或者 绝对路径</span><span class="token comment"># 加上圆点</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/bin:.<span class="token comment"># 可以在任何地方执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>2、LANG 环境变量</p></blockquote><p>LANG环境变量存放的是Linux系统的语言、地区、字符集，它不需要系统管理员手工设置，/etc/profile 会调用 /etc/profile.d/lang.sh 脚本完成对LANG的设置。</p><ul><li><p>CentOS6.x 字符集配置文件在/etc/syscconfig/i18n文件中。</p></li><li><p>CentOS7.x 字符集配置文件在/etc/locale.conf文件中，内容如下：</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8<span class="token comment">#LANG=zh_CN.UTF-8</span><span class="token comment">#LANG=zh_CN.gbk</span><span class="token comment">#LANG=zh_CH.gb18030</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3、LD_LIBRARY_PATH环境变量</p></blockquote><p>C/C++语言动态链接库文件搜索的目录，它不是Linux缺省的环境变量，但对C/C++程序员来说非常重要。LD_LIBRARY_PATH环境变量存放的也是目录列表，目录之间用冒号:分隔，最后的圆点.表示当前目录，与PATH的格式相同。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>目录1:目录2:目录3:<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>目录n:.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>4、CLASSPATH</p></blockquote><p>JAVA语言库文件搜索的目录，它也不是Linux缺省的环境变量，但对JAVA程序员来说非常重要。</p><p>CLASSPATH环境变量存放的也是目录列表，目录之间用冒号:分隔，最后的圆点.表示当前目录，与PATH的格式相同。</p><h2 id="7、环境变量的生效"><a href="#7、环境变量的生效" class="headerlink" title="7、环境变量的生效"></a>7、环境变量的生效</h2><ul><li><p>在 Shell 下，用 <strong>export</strong> 设置的环境变量对当前 Shell 立即生效，Shell 退出后失效。</p></li><li><p>在脚本文件中设置的环境变量不会立即生效，退出 Shell 后重新登录时才生效，或者用 <strong>source</strong> 命令让它立即生效，例如：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="8、建议"><a href="#8、建议" class="headerlink" title="8、建议"></a>8、建议</h2><p>虽然设置环境变量的方法有多种，但是建议系统环境变量建议在 <strong>/etc/profile.d</strong> 目录中配置，用户环境变量在用户的 <strong>.bash_profile</strong> 中配置，不建议在其它脚本文件中配置环境变，会增加运维的麻烦，容易出错。</p><h1 id="七、CentOS7-设置中文字符集"><a href="#七、CentOS7-设置中文字符集" class="headerlink" title="七、CentOS7 设置中文字符集"></a>七、CentOS7 设置中文字符集</h1><h1 id="八、CentOS7-安装软件包的方法"><a href="#八、CentOS7-安装软件包的方法" class="headerlink" title="八、CentOS7 安装软件包的方法"></a>八、CentOS7 安装软件包的方法</h1><p>Linux有多种发行版本，各种发行版本之间安装软件包的方法和命令不一样，同发行版本之间安装软件包的方法也有不同。Linux主要有三大派系：红帽子派系（Redhat、Centos、Oracle Linux）、Debian派系（Ubuntu、Kali），SUSE派系（SuSe、OpenSUSE）等。</p><p>红帽子派是Linux服务器操作系统的主流，本文重点介绍红帽子派系中rpm和yum安装软件包的方法。</p><h2 id="1、rpm-安装"><a href="#1、rpm-安装" class="headerlink" title="1、rpm 安装"></a>1、rpm 安装</h2><p>RPM是RedHat Package Manager的缩写，由RedHat推出的软件包管理管理工具，在Fedora 、Redhat、CentOS、Mandriva、SuSE、YellowDog等主流发行版本，以及在这些版本基础上二次开发出来的发行版采用。</p><p>RPM包里面包含可执行的二进制程序，自身所带的附加文件，版本文件（软件包的依赖关系）。</p><ul><li><p>查看系统中已经安装的软件包</p></li><li><p>rpm -q 软件包名  例如 ftp 查看已经安装的软件包</p></li><li><p>rpm -ql 软件包名 查看软件包安装的目录和文件（包括了可执行程序、配置文件和帮助文档）。</p></li><li><p>rpm -qi 软件包名 查看已安装软件包的详细信息。</p></li><li><p>rpm -qc 软件包名 查看已安装软件包的配置文件所在的位置。</p></li><li><p>rpm -qR 软件包名 查看已安装软件包所依赖的软件包及文件。</p></li></ul><ul><li><p>查看软件包的安装文件，安装包文件的后缀是.rpm</p></li><li><p>rpm -qpi 软件包的安装文件名 查看一个软件包的安装文件的详细信息。</p></li><li><p>rpm -qpl 软件安装包文件名 查看软件包的安装文件所包含的文件。</p></li><li><p>rpm -qpR 软件包的安装文件名 查看软件包的依赖关系。</p></li></ul><p>软件包的安装文件： 安装包文件的后缀是.rpm，以CentOS7为例，系统安装的光盘映像文件是CentOS-7-x86_64-DVD-1908.iso，解开后在Packages目录中有软件包的安装文件</p><p><strong>安装/升级软件包</strong></p><p>如果待安装/升级的软件与其它的软件有依赖关系，请解决依赖关系，即先安装/升级依赖关系的软件包。如果没有解决好依赖关系，可以强制安装/升级，不推荐采用强制的方法，因为有可能导致软件不可用。</p><ul><li>安装软件包：rpm -ivh 软件包的安装文件名</li><li>升级软件包：rpm -Uvh 软件包的安装文件名</li><li>强制安装软件包：rpm -ivh 软件包的安装文件名 –nodeps –force</li><li>强制升级软件包：rpv -Uvh 软件包的安装文件名 –nodeps –force</li><li>删除软件包：rpm -e 软件包名</li></ul><h2 id="2、yum-安装"><a href="#2、yum-安装" class="headerlink" title="2、yum 安装"></a>2、yum 安装</h2><p>rpm安装软件包的虽然方便，但是需要手工解决软件包的依赖关系。很多时候安装一个软件包需要安装多个其他软件包，还有不同版本的兼容性问题，很复杂。yum（Yellow dog Updater, Modified）解决了这些问题，yum是rpm的前端程序，设计的主要目的就是为了自动解决rpm的依赖关系，有以下优点：</p><ol><li><p>自动解决依赖关系；</p></li><li><p>可以对rpm进行分组，基于组进行安装操作；</p></li><li><p>引入仓库概念，支持多个仓库；</p></li><li><p>配置简单。</p></li></ol><blockquote><p>yum 的语法</p></blockquote><p><code>yum [options] [command] [package ...]</code></p><p>options：可选参数：</p><p>1）-h帮助；</p><p>2）-y，当安装过程提示选择全部为yes，不需要再次确认；</p><p>3）-q，不显示安装的过程。</p><p>command：待操作的命令。</p><p>package：待操作的软件包名，多个软件包之间用空格分开，支持用星号*匹配。</p><blockquote><p>yum 的常用命令</p></blockquote><ul><li><strong>安装/升级软件包</strong>：yum install 软件包名/软件包文件名</li><li><strong>升级软件包</strong>：yum update 软件包名</li><li><strong>删除软件包</strong>：yum remove 软件包名</li><li><strong>查找软件包</strong>：yum search 软件包名</li><li>列出所有可更新的软件包清单：yum check-update</li><li>更新所有软件包：yum update</li><li>列出所有可安装软件包的清单：yum list</li><li>清除缓存：yum clean [headers|packages|metadata|dbcache|plugins|expire-cache|all]<ul><li>rm -rf /var/cache/yum</li><li>生成缓存 ： yum makecache</li></ul></li></ul><blockquote><p>示例</p></blockquote><p>1）安装/升级ftp客户端软件包。</p><p>yum -y install ftp</p><p>或</p><p>yum -y install ftp-0.17-67.el7.x86_64.rpm</p><p>2）升级ftp客户端软件包</p><p>yum -y update ftp</p><p>3）删除ftp客户端软件包。</p><p>yum -y remove ftp</p><h2 id="3、应用经验"><a href="#3、应用经验" class="headerlink" title="3、应用经验"></a>3、应用经验</h2><p>1）rpm安装/升级软件包需要手工的解决包的依赖关系，这一点让人确实很烦，所以，软件包的安装/升级一般采用yum命令。</p><p>2）rpm的某些功能，例如查看软件包的详细信息、软件包的安装目录、软件包的配置文件等还是有实用价值的。</p><h1 id="九、CentOS7-系统服务管理"><a href="#九、CentOS7-系统服务管理" class="headerlink" title="九、CentOS7 系统服务管理"></a>九、CentOS7 系统服务管理</h1><h2 id="1、systemctl介绍"><a href="#1、systemctl介绍" class="headerlink" title="1、systemctl介绍"></a>1、systemctl介绍</h2><p>CentOS7启用了新的系统和服务管理器，采用systemctl命令代替了老版本的service和chkconfig。为了保持兼容性，在CentOS7中，老版本的service和chkconfig命令仍然可以使用。</p><p>systemctl命令是system（系统）和control（控制）两个单词的简写，它是一个功能强大的命令，本文只介绍与服务管理相关的用法。</p><p>systemctl命令有一点不足，就是很多命令执行后没有提示信息</p><h2 id="2、systemctl常用命令"><a href="#2、systemctl常用命令" class="headerlink" title="2、systemctl常用命令"></a>2、systemctl常用命令</h2><ul><li><p>start：.service 可以省略</p></li><li><p>stop</p></li><li><p>restart</p></li><li><p>查看服务是否已启动：systemctl is-active name.service</p></li><li><p>status</p><ul><li><p>Loaded：关于服务是否已经加载的信息，文件的绝对路径以及是否被启用的注释。</p><p>Active：服务是否正在运行,然后是启动时间信息。</p><p>Process：进程额外信息。</p><p>Main PID：服务主进程pid。</p><p>CGroup:Control Groups额外信息。</p></li></ul></li><li><p>开机自启动：systemctl enable name.service</p></li><li><p>停用开机自启：systemctl disable name.service</p></li><li><p>查看服务是否开机自启：systemctl is-enabled name.service</p></li><li><p>只重启正在运行的服务：systemctl try-restart name.service</p></li><li><p>显示所有服务状态：systemctl list-units –type service –all</p></li><li><p>查看启动成功的服务：systemctl list-unit-files|grep enabled</p></li><li><p>查看启动失败的服务：systemctl –failed</p></li><li><p>查看所有服务状态：systemctl list-unit-files –type service</p></li><li><p>列出在指定服务之前启动的服务（依赖）：systemctl list-dependencies –after name.service</p></li><li><p>列出在指定服务之后启动的服务（被依赖）：systemctl list-dependencies –before name.service</p></li></ul><h1 id="十、CentOS7-配置防火墙"><a href="#十、CentOS7-配置防火墙" class="headerlink" title="十、CentOS7 配置防火墙"></a>十、CentOS7 配置防火墙</h1><p>防火墙技术是用于安全管理的软件和硬件设备，在计算机内/外网之间构建一道相对隔绝的保护屏障，以保护数据和信息安全性的一种技术。</p><p>防火墙分为网络防火墙和主机防火墙。</p><p>网络防火墙由软件和硬件组成，可以保护整个网络，价格也很贵，从几万到几十万的都有，功能非常强大，主要包括入侵检测、网络地址转换、网络操作的审计监控、强化网络安全服务等功能。</p><p>主机防火墙只有软件部分（操作系统和杀毒软件自带），用于保护本操作系统，功能比较简单，只能防范简单的攻击。</p><p>本文将介绍主机防火墙（CentOS7以上版本）的使用和配置。</p><blockquote><p>防火墙配置</p></blockquote><p>CentOS7的防火墙比CentOS6的功能更强大，配置方法和操作命令也完全不同。</p><p>CentOS7的防火墙规则既可以是端口，也可以是服务。</p><p>防火墙查看和配置以下介绍的命令，如果没有特别说明就表示需要管理员权限执行。</p><h2 id="1、查看防火墙的命令"><a href="#1、查看防火墙的命令" class="headerlink" title="1、查看防火墙的命令"></a>1、查看防火墙的命令</h2><ul><li>查看防火墙的版本。firewall-cmd –version</li><li>查看firewall的状态。firewall-cmd –state</li><li>查看firewall服务状态（普通用户可执行）。systemctl status firewalld</li><li>查看防火墙全部的信息。firewall-cmd –list-all</li><li>查看防火墙已开通的端口。firewall-cmd –list-port</li><li>查看防火墙已开通的服务。firewall-cmd –list-service</li><li>查看全部的服务列表（普通用户可执行）。firewall-cmd –get-services</li><li>查看防火墙服务是否开机启动。systemctl is-enabled firewalld</li></ul><h2 id="2、配置防火墙的命令"><a href="#2、配置防火墙的命令" class="headerlink" title="2、配置防火墙的命令"></a>2、配置防火墙的命令</h2><ul><li>启动、重启、关闭防火墙服务。<ul><li>systemctl start firewalld </li><li>systemctl restart firewalld</li><li>systemctl stop firewalld</li></ul></li><li>开放、移去某个端口。<ul><li>开放80端口：firewall-cmd –zone=public –add-port=80/tcp –permanent</li><li>移去80端口：firewall-cmd –zone=public –remove-port=80/tcp –permanent</li></ul></li><li>开放、移去范围端口。<ul><li>开放5000-5500之间的端口：firewall-cmd –zone=public –add-port=5000-5500/tcp –permanent</li><li>移去5000-5500之间的端口：firewall-cmd –zone=public –remove-port=5000-5500/tcp –permanent</li></ul></li><li>开放、移去服务。<ul><li>开放ftp服务：firewall-cmd –zone=public –add-service=ftp –permanent</li><li>移去http服务：firewall-cmd –zone=public –remove-service=ftp –permanent</li></ul></li><li>重新加载防火墙配置（修改配置后要重新加载防火墙配置或重启防火墙服务）。<ul><li>firewall-cmd –reload</li></ul></li><li>设置开机时启用、禁用防火墙服务。<ul><li> 启用服务：systemctl enable firewalld</li><li> 禁用服务：systemctl disable firewalld</li></ul></li></ul><h2 id="3、centos7-之前的版本"><a href="#3、centos7-之前的版本" class="headerlink" title="3、centos7 之前的版本"></a>3、centos7 之前的版本</h2><p>1）开放80，22，8080 端口。</p><p>/sbin/iptables -I INPUT -p tcp –dport 80 -j ACCEPT</p><p>/sbin/iptables -I INPUT -p tcp –dport 22 -j ACCEPT</p><p>/sbin/iptables -I INPUT -p tcp –dport 8080 -j ACCEPT</p><p>2）保存。</p><p>/etc/rc.d/init.d/iptables save</p><p>3）查看打开的端口。</p><p>/etc/init.d/iptables status</p><p>4）启动、关闭防火墙服务。</p><p># 启动服务</p><p>service iptables start</p><p># 关闭服务</p><p>service iptables stop</p><p>5）设置开机时启用、禁用防火墙服务。</p><p># 启用服务</p><p>chkconfig iptables on</p><p># 禁用服务</p><p>chkconfig iptables off</p><h2 id="4、云平台访问策略配置"><a href="#4、云平台访问策略配置" class="headerlink" title="4、云平台访问策略配置"></a>4、云平台访问策略配置</h2><p>如果您购买的是云服务器，除了配置云服务器的防火墙，还需要登录云服务器提供商的管理平台配置访问策略（或安全组）。</p><p>不同云服务器提供商的管理平台操作方法不同，具体方法请查阅云服务器提供商的操作手册、或者百度，或者咨询云服务器提供商的客服。</p><h1 id="十一、SSH-学习"><a href="#十一、SSH-学习" class="headerlink" title="十一、SSH 学习"></a>十一、SSH 学习</h1>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7_install_jenkins</title>
      <link href="/2021/07/07/centos7-install-jenkins/"/>
      <url>/2021/07/07/centos7-install-jenkins/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1、Jenkins-是什么"><a href="#1、Jenkins-是什么" class="headerlink" title="1、Jenkins 是什么"></a>1、Jenkins 是什么</h2><p>Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。</p><h2 id="2、CI-CD-是什么"><a href="#2、CI-CD-是什么" class="headerlink" title="2、CI/CD 是什么"></a>2、CI/CD 是什么</h2><p> <code>CI(Continuous integration)</code>，中文意思是持续集成。它强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。借用网络图片对 CI 加以理解。</p><p><img src="https://naivekyo.oss-cn-hangzhou.aliyuncs.com/blog%27image/ci.png"></p><p><code>CD(Continuous Delivery)</code>， 中文意思持续交付。它是在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境(类生产环境)中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境。下图反应的是 CI/CD 的大概工作模式。</p><p><img src="https://naivekyo.oss-cn-hangzhou.aliyuncs.com/blog%27image/cd.png"></p><h1 id="二、安装-Jenkins"><a href="#二、安装-Jenkins" class="headerlink" title="二、安装 Jenkins"></a>二、安装 Jenkins</h1><p>环境：CentOS7</p><h2 id="1、前置"><a href="#1、前置" class="headerlink" title="1、前置"></a>1、前置</h2><ul><li><p>官网下载 LTS 版本的 war 包：<a href="https://www.jenkins.io/">https://www.jenkins.io/</a></p></li><li><p>上传到服务器    </p></li><li><p>运行 war 包，将其作为后台进程挂起，输出日志为 <code>jenkins.out</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> java -jar /usr/local/jenkins/jenkins.jar <span class="token operator">&gt;</span> /usr/local/jenkins/jenkins.out <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>访问 Jenkins 的管理页面：Linux IP + 8080 端口（<strong>需要开放端口</strong>）</p></li><li><p>登录密码位置：<code>/root/.jenkins/secrets/initialAdminPassword</code></p></li><li><p>获取密码后输入点击继续，会进入下载插件的界面，由于需要从外网下载，速度较慢，我们需要修改为国内的镜像：（先关掉浏览器界面 并 杀死 Linux 中的 jenkins 进程）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置国内镜像</span><span class="token comment"># 进入 jenkins 工作目录</span><span class="token builtin class-name">cd</span> /root/.jenkins/updates<span class="token comment"># 杀死进程: 先查 PID 然后 kill</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> jenkins<span class="token function">kill</span> -s <span class="token environment constant">TERM</span> <span class="token operator">&lt;</span>PID<span class="token operator">&gt;</span><span class="token comment"># 直接修改配置文件 default.json</span><span class="token comment"># 由于该文件内容太多，直接编辑不好修改，我们可以运行脚本进行修改</span><span class="token function">sed</span> -i <span class="token string">'s/http:Wupdates.jenkins-ci.orgVdownload/https:Wmirrors.tuna.tsinghua.edu.cnVjenkins/g'</span> default.json <span class="token operator">&amp;&amp;</span> <span class="token function">sed</span> -i <span class="token string">'s/http:Wwww.google.com/https:Wwww.baidu.com/g'</span> default.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启 jenkins 下载插件：<strong>选择安装推荐的插件</strong></p></li><li><p>安装完成之后，创建管理员用户：</p></li><li><p>登录</p></li><li><p>进入管理页面后，开始配置 Jenkins</p><p>Manager Jenkins -&gt; Global Tool Configuration</p><p>分别配置 <mark>JDK、Maven、Git</mark></p></li></ul><h2 id="2、Jenkins-自动化配置"><a href="#2、Jenkins-自动化配置" class="headerlink" title="2、Jenkins 自动化配置"></a>2、Jenkins 自动化配置</h2><p>准备工作：</p><ul><li><p>服务器需安装  <mark>Docker</mark></p></li><li><p>需要在工程中添加 <strong>Dockerfile</strong> （和 pom 文件在同一级）</p></li></ul><blockquote><p>前置工作：Dockerfile</p></blockquote><p>Dockerfile：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取 JDK 环境</span>FROM openjdk:8-jdk-alpine<span class="token comment"># 缓存处理</span>VOLUME /tmp<span class="token comment"># 重命名 jar 包</span>COPY ./target/jenkinsdemo-0.0.1-SNAPSHOT.jar demojenkins.jar<span class="token comment"># 执行 jar 包</span>ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/demojenkins.jar"</span>, <span class="token string">"&amp;"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 pom.xml </p><ul><li>更改打包类型为 pom</li><li>添加 maven 插件</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.naivekyo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jenkinsdemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>jenkinsdemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、Jenkins-管理界面创建自动化任务"><a href="#3、Jenkins-管理界面创建自动化任务" class="headerlink" title="3、Jenkins 管理界面创建自动化任务"></a>3、Jenkins 管理界面创建自动化任务</h2><ul><li>Jenkins dashboard -&gt; 新建 Item</li><li>填写任务名称：可随意</li><li>一般选择 <strong>Freestyle project</strong> 即可</li><li>下一步：源代码管理，这里我们将没有编译的代码（mvn：clean）上传到远程仓库中，Jenkins 支持两种仓库 GitHub 和 gitee，但是我只找到了 GitHub 一种</li></ul><hr><blockquote><p>使用 Git 将 springboot 项目上传到 GitHub</p></blockquote><ol><li>在 GitHub 上新建仓库</li><li>记录下仓库的地址，例如 <a href="https://github.com/NaiveKyo/JenkinsTest.git">https://github.com/NaiveKyo/JenkinsTest.git</a></li><li>本机打开 git 的客户端，进入自己要提交的工程的目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 举个例子</span><span class="token comment"># 工程目录下右键 打开 git bash here</span><span class="token comment"># 第一步，初始化</span><span class="token function">git</span> init<span class="token comment"># 第二步，上传，这里直接是将所有文件添加到仓库中，如果只想添加指定的文件，可以把 . 换成特定的文件名称</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 第三步，提交到本地仓库</span><span class="token function">git</span> commit -m <span class="token string">"description"</span> <span class="token comment"># 表示提交的注释</span><span class="token comment"># 可能需要输入 GitHub 账户名和密码</span><span class="token comment"># 可以使用以下方式配置全局信息，以后比较方便</span><span class="token function">git</span> config --global user.email <span class="token string">"Your Email"</span><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span><span class="token comment"># 第四步，和远程仓库相关联</span><span class="token function">git</span> remote <span class="token function">add</span> origin https://仓库url<span class="token comment"># 最后，上传到远程仓库，指定分支 master</span><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>将本地代码上传到远程仓库 <a href="https://github.com/NaiveKyo/JenkinsTest.git">https://github.com/NaiveKyo/JenkinsTest.git</a></li><li>Jenkins Dashboard 新建 Item，设置好配置信息</li><li><strong>注意：开始构建之前，必须开启 Docker</strong></li><li>开始构建项目</li><li>Build Success</li></ul><h2 id="4、Jenkins-执行任务时遇到的错误"><a href="#4、Jenkins-执行任务时遇到的错误" class="headerlink" title="4、Jenkins 执行任务时遇到的错误"></a>4、Jenkins 执行任务时遇到的错误</h2><p>git 一直无法拉取远程仓库地址：</p><blockquote><p>推荐方案一，剩下两种没测试</p></blockquote><ul><li><p>尝试过配置 ssh，但是无效</p></li><li><p><strong>最终解决方案</strong>：</p><ul><li><strong>缺少插件</strong>：curl-devel ：Jenkins 通过 git 发起 http 请求需要使用工具 <code>curl-devel</code>（我只安装了 wget）</li><li>重新编译 git</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/git/git_x.x.x./configuration --prefix<span class="token operator">=</span>/usr/local/git<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>方式二：<code>yum install git-http</code></p></li><li><p>方式三：git 代替 https <code>git clone --recursive git://github.com/用户名/仓库地址</code></p></li></ul><h1 id="三、补充知识"><a href="#三、补充知识" class="headerlink" title="三、补充知识"></a>三、补充知识</h1><h2 id="1、Linux-知识"><a href="#1、Linux-知识" class="headerlink" title="1、Linux 知识"></a>1、Linux 知识</h2><h3 id="（1）nohup"><a href="#（1）nohup" class="headerlink" title="（1）nohup"></a>（1）nohup</h3><p>nohup 命令全程 no hang up，用于在系统后台不挂断的运行命令，退出终端不会影响程序的运行。</p><p>nohup 命令，在默认情况下（非重定向时），会输出一个名叫 <code>nohup.out</code> 的文件到当前目录下，如果当前目录的 nohup.out 不可写，输出重定向到 <code>$HOME/nohup.out</code> 文件中。</p><h3 id="（2）标准输入、输出"><a href="#（2）标准输入、输出" class="headerlink" title="（2）标准输入、输出"></a>（2）标准输入、输出</h3><ul><li>标准输入：stdin  代码 0  用 &lt; 或 &lt;&lt; 表示</li><li>标准输出：stdout 代码 1 用 &gt; 或 &gt;&gt; 表示</li><li>标准错误输出：stderr 代码 2 用 2&gt; 或 2&gt;&gt; 表示</li></ul><p>将命令执行的正确信息和错误信息做处理：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 分别存放到不同的文件</span><span class="token function">find</span> /home -name .bashrc <span class="token operator">&gt;</span> /right.txt <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> /error.ext<span class="token comment"># 丢弃错误信息，只保存正确信息</span><span class="token function">find</span> /home -name .bashrc <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> /dev/null<span class="token comment"># 将正确和错误的信息输出到同一个文件</span><span class="token function">find</span> /home -name .bashrc <span class="token operator">&gt;</span> /right.txt <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token comment"># 或者</span><span class="token function">find</span> /home -name .bashrc <span class="token operator">&amp;&gt;</span> /right.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 cat 命令简单的创建一个文件</span><span class="token function">cat</span> <span class="token operator">&gt;</span> text.txt<span class="token comment"># 然后输入消息，退出使用 ctrl + d</span><span class="token comment"># 使用 cat 和 &lt; 创建文件，可以实现类似复制文件的作用</span><span class="token function">cat</span> <span class="token operator">&gt;</span> text.txt <span class="token operator">&lt;</span> ./message.txt<span class="token comment"># 测试 &lt;&lt; 该符号代表 `结束的输入字符`</span><span class="token function">cat</span> <span class="token operator">&gt;</span> text.txt <span class="token operator">&lt;&lt;</span> <span class="token string">"eof"</span><span class="token comment"># 输入消息，最后一行是 eof 表示退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）Linux-中的-amp"><a href="#（3）Linux-中的-amp" class="headerlink" title="（3）Linux 中的 &amp;"></a>（3）Linux 中的 &amp;</h3><p><strong>幕后工作：</strong>在命令结尾加上 &amp; 表示将这个任务放到后台执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 递归的复制文件目录，假如目录很大，需要很久，可以放到后台执行</span><span class="token function">cp</span> -R original/dir/ backup/dir/ <span class="token operator">&amp;</span><span class="token comment"># 回车执行后，会显示一个 进程 ID 号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>任务被放到后台执行之后，就可以立即继续在同一个终端上工作了，甚至关闭终端也不影响这个任务的正常执行。需要注意的是，如果要求这个任务输出内容到标准输出中（例如 <code>echo</code> 或 <code>ls</code>），即使使用了 <code>&amp;</code>，也会等待这些输出任务在前台运行完毕。</p><p>当使用 <code>&amp;</code> 将一个进程放置到后台运行的时候，Bash 会提示这个进程的进程 ID。在 Linux 系统中运行的每一个进程都有一个唯一的进程 ID，你可以使用进程 ID 来暂停、恢复或者终止对应的进程，因此进程 ID 是非常重要的。</p><p>当使用该命令启动一个后台进程时，我们可以在当前终端下使用如下几个命令管理后台进程：</p><ul><li><p><code>jobs</code> 命令可以显示当前终端正在运行的进程，包括前台和后台运行的进程。它对每一个正在执行的进程任务分配一个序号（这个序号不是进程 ID），可以使用这些序号来引用各个进程任务：</p></li><li><p><code>fg</code> 命令可以将后台运行的进程任务放到前台运行，这样可以比较方便地进行交互。根据 <code>jobs</code> 命令提供的进程任务序号，再在前面加上 <code>%</code> 符号，就可以把相应的进程任务放到前台运行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 jobs 显示的标号为 1 的进程放到前台运行</span><span class="token function">fg</span> % <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果这个进程任务是暂停状态，fg 命令可以将它启动起来</p></li><li><p><code>ctrl + z</code> 可以将前台运行的任务暂停，仅仅是暂停而不是终止。当使用 <code>fg</code> 或者 <code>bg</code> 命令将任务重新启动起来的时候，任务会从暂停的地方继续执行。但 <code>sleep</code> 命令是一个特例，<code>sleep</code> 任务被暂停的时间会计算在 <code>sleep</code> 时间之内。因为 <code>sleep</code> 命令依据的是系统时钟的时间，而不是实际运行的时间。也就是说，如果运行了 <code>sleep 30</code> ，然后将任务暂停 30 秒以上，那么任务恢复执行的时候会立即终止并退出。</p></li><li><p><code>bg</code> 命令会将任务防止到后台运行，如果任务是暂停的，也会被启动起来</p></li></ul><h3 id="（4）Linux-的-kill-命令"><a href="#（4）Linux-的-kill-命令" class="headerlink" title="（4）Linux 的 kill 命令"></a>（4）Linux 的 kill 命令</h3><p>前面介绍的几个命令适合在同一个终端中使用，如果启动进程任务的终端关闭了，就无法使用了。</p><p>如果要在另一个终端管理后台进程，就需要使用其他工具，例如 <code>kill</code></p><ul><li><p>暂停后台进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先查进程号</span><span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> 进程名<span class="token comment"># 暂停进程 等同于 ctrl + z</span><span class="token function">kill</span> -s STOP <span class="token operator">&lt;</span>PID<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>把暂停的进程启动：<code>kill -s CONT &lt;PID&gt;</code></p></li><li><p>终止进程：<code>kill -s TERM &lt;PID&gt;</code></p></li><li><p>如果进程不相应 TERM 信号并拒绝退出，可以发送 KILL 信号强制终止进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> -s KILL <span class="token operator">&lt;</span>PID<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制终止进程可能会有一定的风险，但如果遇到进程无节制消耗资源的情况，这样的信号还是有用的</p></li><li><p>如果不确定进程 ID 是否存在，可以这样 <code>ps x | grep jenkins</code></p></li><li><p>将 <code>ps</code> 和 <code>grep</code> 结合起来的命令：<code>pgrep 字符串</code>，它可以把包含指定字符的进程 ID 列出来</p></li><li><p>加一些参数 ：<code>pgrep -lx 字符串</code>，这样就可以把名称也显示出来，如果想了解更多的细节，可以这样：<code>pgrep -ax</code>，更多请 –help</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Deploy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7_install_docker</title>
      <link href="/2021/07/07/centos7-install-docker/"/>
      <url>/2021/07/07/centos7-install-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>容器的概念在 Linux 中早就有了，并不是 Docker 提出了容器的概念，它是一种轻量级的虚拟化技术，现在常用于打包项目环境，方便我们部署。</p><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><h2 id="1、安装前准备"><a href="#1、安装前准备" class="headerlink" title="1、安装前准备"></a>1、安装前准备</h2><p>LInux 内核版本，官方建议 3.10 以上。</p><ul><li>查看当前内核版本：<code>uname -r</code></li></ul><p><strong>如果不满足条件，可以更新系统：</strong></p><ul><li><code>yum -y update</code>（<strong>谨慎使用</strong>）：升级所有包的同时也升级软件和系统内核</li><li><code>yum -y upgrade</code>：只升级所有包，不升级软件和系统内核</li></ul><p>如果之前安装过 Docker，卸载旧版本：</p><p><code>yum remove docker docker-common docker-selinux docker-engine</code></p><h2 id="2、安装-Docker"><a href="#2、安装-Docker" class="headerlink" title="2、安装 Docker"></a>2、安装 Docker</h2><ul><li><p>安装相关依赖</p><p>yum-utils 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖</p><p><code>yum install -y yum-tuils device-mapper-persistent-data lvm2</code></p></li><li><p>查看已经安装的包 <code>yum list installed</code></p></li><li><p>设置 yum 源，两个都可以使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo（中央仓库）yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>选择 Docker 版本并安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看可用版本</span>yum list docker-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r<span class="token comment"># 选择一个版本安装。当然也可以默认安装，就是最新版</span>yum <span class="token function">install</span> docker-ce<span class="token comment"># 启动 Docker 并设置开机自启</span>systemctl start dockersystemctl <span class="token builtin class-name">enable</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7-install-git</title>
      <link href="/2021/07/06/centos7-install-git/"/>
      <url>/2021/07/06/centos7-install-git/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>CentOS 版本的 Linux，可能默认就带有 git，但是其 yum 仓库中支持的 Git 版本最高是 1.8.1。</p><p>如果直接使用命令 <code>yum -y install git</code>，则安装的是其默认的，我们需要安装最新版的。</p><p>查看版本 默认支持的版本 <code>yum info git</code></p><h2 id="二、安装最新版-Git"><a href="#二、安装最新版-Git" class="headerlink" title="二、安装最新版 Git"></a>二、安装最新版 Git</h2><h3 id="1、卸载旧的-Git、安装新的"><a href="#1、卸载旧的-Git、安装新的" class="headerlink" title="1、卸载旧的 Git、安装新的"></a>1、卸载旧的 Git、安装新的</h3><ul><li><p>如果系统中自带的有 Git，先卸载：<code>yum remove git</code></p></li><li><p>想要安装任意版本的 Git，我们可以使用 <code>wget</code> 或者 <code>curl</code> 工具到对应的仓库中获取 Git</p></li><li><p>推荐网站：<code>https://mirrors.edge.kernel.org/pub/software/scm/git/</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 例如这里安装的 2.18.4 版本的 git</span><span class="token function">wget</span> https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.18.4.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>由于我们没有使用 yum 安装，所以 Git 所需要的依赖只能自己来安装了，感兴趣可以试试查看依赖 </p></li><li><p><code>yum deplist git</code></p></li><li><p>安装依赖及下面的步骤</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装依赖</span>yum <span class="token function">install</span> -y zlib-devel bzip2-devel openssl-devel ncurses-devel gcc perl-ExtUtils-MakeMaker package<span class="token comment"># 解压 Git</span><span class="token function">tar</span> -zxvf ./git-2.18.4.tar.gz<span class="token comment"># 安装</span><span class="token builtin class-name">cd</span> ./git-2.18.4/<span class="token comment"># 这里 /usr/local/git 是我创建的放置 git 的地方 /usr/local/git/git-2.18.4</span>./configure --prefix<span class="token operator">=</span>/usr/local/git all<span class="token comment"># 编译并安装 git 注意这里需要 c++ 的编译器，如果没有就 yum install gcc-c++</span><span class="token comment"># 这里默认安装到 /usr/local 下，可以指定目录，例如</span><span class="token comment"># make install /usr/local/mygit</span><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、Git-相关配置"><a href="#2、Git-相关配置" class="headerlink" title="2、Git 相关配置"></a>2、Git 相关配置</h3><ul><li><p>配置环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">${JAVA_HOME}</span>/bin:<span class="token variable">${MAVEN_HOME}</span>/bin:/usr/local/git/bin<span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果想要卸载 Git，安装其他的版本，可以这样：<code>yum remove git</code></p></li><li><p>配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置基本信息</span><span class="token function">git</span> config --global user.name <span class="token string">"username"</span><span class="token function">git</span> config --global user.email QQ邮箱<span class="token comment"># 查看配置</span><span class="token function">git</span> config --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="三、补充小知识"><a href="#三、补充小知识" class="headerlink" title="三、补充小知识"></a>三、补充小知识</h2><blockquote><p>Linux 安装软件源码包的流程：</p></blockquote><p>一般会涉及到三个步骤：</p><p>一般会涉及到三个步骤：</p><ol><li><p><code>./configure</code></p><ul><li><p>该步骤主要用来检测系统的配置、环境以及相关依赖，如果缺少相关依赖，该脚本会终止执行，软件安装失败</p><p>当该脚本执行完成之后，会生成一个 Makefile 文件，该文件规定了用什么编译器、编译参数等等，描述了文件编译的互相依赖关系</p></li></ul></li><li><p><code>make</code></p><p>该步骤主要用来编译源代码，make 命令会从 Makefile 文件中读取相关指令，编译完成后会生成可执行文件</p></li><li><p><code>make install</code></p><p>该步骤主要用来安装软件，make install 命令会从 Makefile 文件中读取相关指令，然后将软件安装到指定的位置， 默认安装位置是 <code>/usr/local</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7-install-jdk</title>
      <link href="/2021/07/06/centos7-install-jdk/"/>
      <url>/2021/07/06/centos7-install-jdk/</url>
      
        <content type="html"><![CDATA[<h2 id="一、卸载-Open-JDK"><a href="#一、卸载-Open-JDK" class="headerlink" title="一、卸载 Open-JDK"></a>一、卸载 Open-JDK</h2><p>有的 Linux 系统可能已经安装了 open-jdk，它是 jdk 开源之前的版本，已经不在维护了，我们可以卸载它</p><ul><li><p>使用命令 <code>rpm -qa | grep java</code> 查询系统中和 java 相关的文件，一个个删除</p></li><li><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64<span class="token function">rpm</span> -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64<span class="token function">rpm</span> -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64<span class="token function">rpm</span> -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>检查是否已经删除成功：输入 <strong>java -version</strong></p></li><li><p>如果没有删除完，就使用 yum 删除：<strong>yum -y remove</strong></p></li></ul><h2 id="二、安装稳定的-JDK"><a href="#二、安装稳定的-JDK" class="headerlink" title="二、安装稳定的 JDK"></a>二、安装稳定的 JDK</h2><p>官网：<a href="http://www.oracle.com/">http://www.oracle.com</a></p><p>下载相应的 Linux 版本后，做好备份，开始解压</p><p>可以将 jdk 复制一份放到 <code>/usr/local/src</code> 做备份</p><p>在 <code>/usr/java</code> 中解压 jdk（创建一个 java 目录）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tar</span> -zxvf jdk-8u281-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有权限就：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> jdk-8u281-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果实在不行，就进入 root 用户进行操作</p><p>解压完成后开始设置系统环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span class="token comment"># 最后面添加下列</span><span class="token comment"># java environment</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/java/jdk1.8.0_281<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">${JAVA_HOME}</span>/jre/lib/rt.jar:<span class="token variable">${JAVA_HOME}</span>/lib/dt.jar:<span class="token variable">${JAVA_HOME}</span>/lib/tools.jar<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">${JAVA_HOME}</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置完成后，重新编译配置文件：<code>source /etc/profile</code></p><p>最后检查是否成功安装：<code>java -version</code> 如何输出了 java 的版本信息就说明成功了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7-install-mysql</title>
      <link href="/2021/07/06/centos7-install-mysql/"/>
      <url>/2021/07/06/centos7-install-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="一、官方推荐"><a href="#一、官方推荐" class="headerlink" title="一、官方推荐"></a>一、官方推荐</h2><p>官方文档：<a href="https://dev.mysql.com/doc/mysql-installation-excerpt/5.6/en/linux-installation-yum-repo.html">https://dev.mysql.com/doc/mysql-installation-excerpt/5.6/en/linux-installation-yum-repo.html</a>    </p><p>根据官网推荐安装 <code>yum 仓库</code></p><p>注意自己的 Linux 版本，例如我用的 CentOS7 7.x 可以下载对应的 Oracle Linux 7 版本的 yum 仓库配置</p><p>下载地址：<a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p><p>然后输入以下命令更新自己的本地 yum 仓库列表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum localinstall mysql57-community-release-el7-<span class="token punctuation">{</span>version-number<span class="token punctuation">}</span>.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以输入以下命令检查是否成功更新本地 yum 仓库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum repolist enabled <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"mysql.*-community.*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新成功后可以直接安装，官方下载的 yum 仓库配置，默认开启当前 GA 版本的支持，如果想更换版本可以这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先查看哪些版本被启用</span>shell<span class="token operator">&gt;</span> yum repolist all <span class="token operator">|</span> <span class="token function">grep</span> mysql<span class="token comment"># 然后可以更换版本, 这里假如当前GA版本为 5.7，想要更换为 5.6 </span>shell<span class="token operator">&gt;</span> <span class="token function">sudo</span> yum-config-manager --disable mysql57-communityshell<span class="token operator">&gt;</span> <span class="token function">sudo</span> yum-config-manager --enable mysql56-community<span class="token comment"># 一般都不用更换版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了使用命令更改，还可以直接找到相关文件进行修改：</p><p> <code>/etc/yum.repos.d/mysql-community.repo</code> </p><p>如果是 EL8 版本的内核，还需要考虑其他情况，具体参见官方文档</p><h2 id="二、默认安装（推荐）"><a href="#二、默认安装（推荐）" class="headerlink" title="二、默认安装（推荐）"></a>二、默认安装（推荐）</h2><p>安装命令：</p><p>两种方式，可以安装到默认的位置，也可以自定义（不推荐，比较麻烦）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认</span><span class="token function">sudo</span> yum -y <span class="token function">install</span> mysql-community-server<span class="token comment"># 自定义</span><span class="token function">sudo</span> yum -c /etc/yum --releasever<span class="token operator">=</span>/ --installroot<span class="token operator">=</span>/usr/local/mysql-8.0 -y <span class="token function">install</span> mysql-community-server<span class="token comment"># 参数</span><span class="token comment"># -c 是读取 yum 的配置文件路径</span><span class="token comment"># --releasever=/</span><span class="token comment">#  我们可以在 yum 配置源的文件中找到很多这样的字符 $releasever 和 $basearch</span><span class="token comment">#$releasever 代表当前系统的发行版本，可以通过 rpm -qi centos-release</span><span class="token comment">#$basearch 是我们的系统硬件架构（CPU 指令集），可以使用命令 arch 得到</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yum 虽然很好的解决了 软件依赖 的问题，但是不能查看软件的位置，我们可以使用 rpm 来查看相关信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看软件包安装的目录和文件（包括了可执行程序、配置文件和帮助文档）。</span><span class="token function">rpm</span> -ql mysql-community-server<span class="token comment"># 查看已安装软件包的详细信息。 和 yum info 有点类似</span><span class="token function">rpm</span> -qi mysql-community-server<span class="token comment"># 查看已安装软件包的配置</span><span class="token function">rpm</span> -qc mysql-community-server <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到默认安装后，mysql 的相关文件的位置是严格遵守 Linux 目录的 <code>FHS</code>。</p><h3 id="1、开启-MySQL-服务"><a href="#1、开启-MySQL-服务" class="headerlink" title="1、开启 MySQL 服务"></a>1、开启 MySQL 服务</h3><p>这里要提一下：</p><p>MySQL 官方推荐创建 mysql 用户和用户组来管理 mysql 服务。</p><p>我们采用的 yum 方式安装 mysql-community-server ，已经默认给我们创建好了对应的系统账户和组，所以可以不用管这一步。</p><p>使用 <code>cat /etc/passwd | grep mysql</code> 可以看到 mysql 系统账户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建组</span><span class="token function">groupadd</span> mysql<span class="token comment"># 创建用户</span><span class="token function">useradd</span> -r -g mysql -s /bin/false mysql<span class="token comment"># 注意，我们只需要创建一个账户用于管理 mysql 服务，所以可以这样做</span><span class="token comment"># -r 创建系统账户，不会给它生成家目录</span><span class="token comment"># -g 属于 mysql 组</span><span class="token comment"># -s 指定该系统账户持有的 shell 为 /bin/false</span><span class="token comment">#    </span><span class="token comment"># 最后还需要给相应的mysql文件设置权限：chmod 750 mysql-files</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以开启服务了：</p><p>分为两种情况：</p><ul><li><p>初始化随机密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认安装，环境变量已经配置好了</span>mysqld --initialize --user<span class="token operator">=</span>mysql<span class="token comment"># 使用 systemctl 开启服务</span>systemctl start mysqld<span class="token comment"># 查看初始化后随机生成的密码</span><span class="token function">tail</span> /var/log/mysqld.log <span class="token operator">|</span> <span class="token function">grep</span> temporary<span class="token comment"># 可以看到</span><span class="token punctuation">[</span>Note<span class="token punctuation">]</span> <span class="token punctuation">[</span>MY-010454<span class="token punctuation">]</span> <span class="token punctuation">[</span>Server<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: <span class="token operator">&lt;</span>6za-KXb<span class="token operator">&amp;</span>j<span class="token comment">#p</span><span class="token comment"># 后面就是密码</span><span class="token comment"># 登录数据库并修改密码</span>mysql -u root -penter password: （注：这里输入密码不显示，输入刚刚的随机密码就好了）<span class="token comment"># 登录成功后修改密码才能执行下一步操作, 这里我设置密码为 123456</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'123456'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不生成密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果想不生成随机密码，可以使用如下命令初始化数据目录</span>mysqld --initialize-insecure --user<span class="token operator">=</span>mysql<span class="token comment"># 开启服务后，登录时使用</span>mysql -u root --skip-password<span class="token comment"># 然后修改密码</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'root-password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、修改-MySQL-配置文件"><a href="#2、修改-MySQL-配置文件" class="headerlink" title="2、修改 MySQL 配置文件"></a>2、修改 MySQL 配置文件</h3><p>默认安装一般 MySQL 服务启动时加载的配置参数在 <code>/etc/my.cnf</code> 文件中，我们可以修改其中的配置：</p><p>下面列举最简单的一种情况，以方便我们在 Windows 中使用工具远程连接服务器数据库：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">client</span><span class="token punctuation">]</span></span><span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">3306</span><span class="token key attr-name">socket</span><span class="token punctuation">=</span><span class="token value attr-value">/tmp/mysql.sock</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span><span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">3306</span><span class="token key attr-name">socket</span><span class="token punctuation">=</span><span class="token value attr-value">/tmp/mysql.sock</span><span class="token key attr-name">key_buffer_size</span><span class="token punctuation">=</span><span class="token value attr-value">16M</span><span class="token key attr-name">max_allowed_packet</span><span class="token punctuation">=</span><span class="token value attr-value">128M</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqldump</span><span class="token punctuation">]</span></span>quick<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们要使用 root 账户连接，所以需要了解一下 MySQL 中账户访问的相关知识：</p><ul><li><p>mysql 中账户名由两部分组成 ‘user_name‘@’host_name’</p></li><li><p>在 MySQL 中，不仅要指定谁可以连接，还要指定可以从什么地方进行连接，这意味着，可以有拥有相同名字、但会从不同位置连接服务器的两个用户</p><p>进入 MySQL 命令行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use mysql<span class="token punctuation">;</span><span class="token keyword">select</span> user, <span class="token function">host</span> from user<span class="token punctuation">;</span><span class="token comment"># 可以看到 root 的 host 是 localhost</span><span class="token comment"># 这意味着 root 用户只能从本机访问 mysql 服务</span><span class="token comment"># 我们现在想在远程访问就需要做一些修改</span><span class="token comment"># 为了方便，我这里直接将 访问地址 改为通配符 % ，允许任何地方连接</span><span class="token comment"># 如果是实际的服务器，可能会带来风险，请视实际情况而定</span>update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token string">'%'</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span class="token comment"># 刷新权限</span>flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3、开放端口和服务"><a href="#3、开放端口和服务" class="headerlink" title="3、开放端口和服务"></a>3、开放端口和服务</h3><p>由于 centos 7 拥有防火墙，如果我们想要远程访问 MySQL 服务，就需要开放相应的端口和服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 最简单的情况，关闭防火墙，并禁用它</span>systemctl stop firewalldsystemctl disable firewalld<span class="token comment"># 安全的情况</span><span class="token comment"># 我们在 my.cnf 中指定了MySQL使用的端口</span><span class="token comment"># 开发端口</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp --permanent<span class="token comment"># 开放服务</span>firewall-cmd --zone<span class="token operator">=</span>public --add-service<span class="token operator">=</span>mysql --permanent<span class="token comment"># 重新加载</span>firewall-cmd --reload<span class="token comment"># 查看结果</span>firewall-cmd --list-portfirewall-cmd --list-service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、测试远程连接"><a href="#4、测试远程连接" class="headerlink" title="4、测试远程连接"></a>4、测试远程连接</h3><p>自己使用工具进行远程连接测试</p><h2 id="三、自定义安装"><a href="#三、自定义安装" class="headerlink" title="三、自定义安装"></a>三、自定义安装</h2><h3 id="1、命令"><a href="#1、命令" class="headerlink" title="1、命令"></a>1、命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum -c /etc/yum --releasever<span class="token operator">=</span>/ --installroot<span class="token operator">=</span>/usr/local/mysql_8.0 -y <span class="token function">install</span> mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我在这里安装到 <code>/usr/local/mysql_8.0</code> 下面，查看目录后可以发现，在该目录下的所有目录和根路径下面的一样，下面列举出常用目录：</p><ul><li>可以发现 <code>mysql_8.0/bin/mysql</code> 和 <code>mysql_8.0/usr/bin/mysql</code>，以及 <code>mysql_8.0/sbin/mysqld</code> 和 <code>mysql_8.0/usr/sbin/mysqld</code>，都是 <strong>硬链接</strong> 的关系</li><li>一些常用的命令现在感觉有些冗余，可见虽然使用了 安装路径 后便于管理，但是使用起来感觉不太方便，所以还是推荐默认安装</li><li>而且现在还需要配置环境变量</li></ul><h3 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h3><p>设置 mysql <strong>系统环境变量</strong></p><p>Linux 推荐我们在 <code>/etc/profile.d/</code> 目录下通过编写 mysql.sh 来配置其环境变量，因为 Linux 启动后会读取  <code>/etc/profile</code>  文件，然后根据其中的内容又会调用 <code>/etc/profile.d/</code> 目录下的脚本文件，但是又要花时间学习 shell 编写脚本。为了方便还是直接在 <code>/etc/profile</code> 中编写环境变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果 /etc/profile 不可以编写，先更改权限 chmod u+w /etc/profile</span><span class="token comment"># 最后一行加上</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/mysql_8.0/bin:/usr/local/mysql_8.0/sbin<span class="token comment"># 使其生效</span><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、关于配置文件"><a href="#3、关于配置文件" class="headerlink" title="3、关于配置文件"></a>3、关于配置文件</h3><p>Linux 中的 MySQL 配置文件的名称为 <code>my.cnf</code>，采用自定义安装，可以在 <code>/etc/my.cnf</code> 和 <code>/usr/local/mysql_8.0/etc/my.cnf</code> 找到，我们只需关注 mysql 安装路径下的配置文件就好了。</p><p>感兴趣可以到官网看看：<a href="https://dev.mysql.com/doc/refman/8.0/en/server-configuration-defaults.html">https://dev.mysql.com/doc/refman/8.0/en/server-configuration-defaults.html</a></p><h3 id="4、自定义路径的坑"><a href="#4、自定义路径的坑" class="headerlink" title="4、自定义路径的坑"></a>4、自定义路径的坑</h3><p>可能会遇到这个错误：</p><p><code>Cannot find a valid baseurl for repo: base/$releasever/x86_64</code></p><ul><li><strong>这里是由于我指定了安装路径但是没有指定内核版本导致的问题，加上 –releasever=/ 就好了，当然了解一下怎么换源也不错</strong></li><li>**在虚拟机中测试的时候，由于我设置静态 ip 的时候配置 dns 没有正确配置，也报了这个错，正确配置应该是这样的 ** <code>DNS1=114.114.114.114</code>，第二个 DNS2 可加可不加，记住要加 DNS1， OvO</li></ul><p>现在尝试配置其他源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 可以先查看默认的源</span><span class="token function">cat</span> /etc/yum.repos.d/CentOS-Base.repo <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>base<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Base<span class="token assign-left variable">mirrorlist</span><span class="token operator">=</span>http://mirrorlist.centos.org/?release<span class="token operator">=</span><span class="token variable">$releasever</span><span class="token operator">&amp;</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token variable">$basearch</span><span class="token operator">&amp;</span><span class="token assign-left variable">repo</span><span class="token operator">=</span>os<span class="token operator">&amp;</span><span class="token assign-left variable">infra</span><span class="token operator">=</span><span class="token variable">$infra</span><span class="token comment">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span class="token comment">#released updates </span><span class="token punctuation">[</span>updates<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Updates<span class="token assign-left variable">mirrorlist</span><span class="token operator">=</span>http://mirrorlist.centos.org/?release<span class="token operator">=</span><span class="token variable">$releasever</span><span class="token operator">&amp;</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token variable">$basearch</span><span class="token operator">&amp;</span><span class="token assign-left variable">repo</span><span class="token operator">=</span>updates<span class="token operator">&amp;</span><span class="token assign-left variable">infra</span><span class="token operator">=</span><span class="token variable">$infra</span><span class="token comment">#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span class="token comment">#additional packages that may be useful</span><span class="token punctuation">[</span>extras<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Extras<span class="token assign-left variable">mirrorlist</span><span class="token operator">=</span>http://mirrorlist.centos.org/?release<span class="token operator">=</span><span class="token variable">$releasever</span><span class="token operator">&amp;</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token variable">$basearch</span><span class="token operator">&amp;</span><span class="token assign-left variable">repo</span><span class="token operator">=</span>extras<span class="token operator">&amp;</span><span class="token assign-left variable">infra</span><span class="token operator">=</span><span class="token variable">$infra</span><span class="token comment">#baseurl=http://mirror.centos.org/centos/$releasever/extras/$basearch/</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span class="token comment">#additional packages that extend functionality of existing packages</span><span class="token punctuation">[</span>centosplus<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Plus<span class="token assign-left variable">mirrorlist</span><span class="token operator">=</span>http://mirrorlist.centos.org/?release<span class="token operator">=</span><span class="token variable">$releasever</span><span class="token operator">&amp;</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token variable">$basearch</span><span class="token operator">&amp;</span><span class="token assign-left variable">repo</span><span class="token operator">=</span>centosplus<span class="token operator">&amp;</span><span class="token assign-left variable">infra</span><span class="token operator">=</span><span class="token variable">$infra</span><span class="token comment">#baseurl=http://mirror.centos.org/centos/$releasever/centosplus/$basearch/</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单分析以下每个源（源都以 [] 括住）中主要的配置信息：以 [base] 为例</p><ul><li>[base] 源</li><li>name：说明当前软件源的意义，不重要</li><li>mirrorlist：列出这个软件源可以使用的镜像站，如果不想使用，可以注释掉</li><li><strong>baseurl</strong>：这个最重要，后面接的是这个软件源的实际地址，mirrorlist 是 YUM 程序自动识别镜像站，baseurl 则是指定固定的软件源网址</li><li>enable=1：让该软件源被启用，不想启用就设置为 0</li><li>gpgcheck=1：指定要查看 RPM 的数字签名</li><li>gpgkey=xxx：就是数字签名的公钥文件所在位置，使用默认值即可</li></ul><p>例如改为阿里云源：</p><p>官网：<a href="http://mirrors.aliyun.com/repo/">http://mirrors.aliyun.com/repo/</a></p><p>我们可以下载官方的 yum 源配置，windows 下直接下载文件，或者在 Linux 的图形界面访问官网。</p><p>我习惯于使用 命令行 ，所以使用如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 有个插件 fastestmirror 是用于测试当有多个源时选择速度最快的那个，可禁可不禁</span><span class="token comment"># 我们对 yum 的源配置文件做备份就好了</span><span class="token function">cp</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<span class="token comment"># 获取 阿里云 的 repo，直接覆盖就好了，注意内核版本</span><span class="token function">wget</span> -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<span class="token comment"># Tip：我没有用这种方法，而是在原来的文件中直接将所有源禁用，设置 enable=0</span><span class="token comment"># 然后再去阿里云对应的 repo 文件中复制所有配置源信息到目标文件中</span><span class="token comment"># 最后启用 阿里云 的源，设置 enable=1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后清除缓存再生成缓存：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清除缓存</span>yum clean all<span class="token function">rm</span> -rf /var/cache/yum<span class="token comment"># 重新生成缓存</span>yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、自定义安装配置"><a href="#5、自定义安装配置" class="headerlink" title="5、自定义安装配置"></a>5、自定义安装配置</h3><p>参考官网：<a href="https://dev.mysql.com/doc/refman/8.0/en/data-directory-initialization.html">https://dev.mysql.com/doc/refman/8.0/en/data-directory-initialization.html</a></p><p>官方推荐创建 mysql 组 和 用户 来管理 mysql，允许该用户连接数据库服务器，远程安全连接可以使用 <code>mysql_ssl-rsa_setup</code> 程序创建默认的 SSL 和 RSA 文件。不过我们是学习就算了</p><p>tip：在MySQL 8.0中，默认的身份验证插件已从更改 <code>mysql_native_password</code>为 <code>caching_sha2_password</code>，并且 默认情况下<code>'root'@'localhost'</code>使用管理帐户<code>caching_sha2_password</code>。</p><h2 id="四、配置文件"><a href="#四、配置文件" class="headerlink" title="四、配置文件"></a>四、配置文件</h2><p>my.conf 需要慢慢调试找到最优配置：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">client</span><span class="token punctuation">]</span></span>    <span class="token key attr-name">port</span> <span class="token punctuation">=</span> <span class="token value attr-value">3306</span><span class="token key attr-name">socket</span> <span class="token punctuation">=</span> <span class="token value attr-value">/tmp/mysql.sock</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span><span class="token key attr-name">user</span> <span class="token punctuation">=</span> <span class="token value attr-value">mysql    --- 表示MySQL的管理用户</span><span class="token key attr-name">port</span> <span class="token punctuation">=</span> <span class="token value attr-value">3306    --- 端口</span><span class="token key attr-name">socket</span> <span class="token punctuation">=</span> <span class="token value attr-value">/tmp/mysql.sock    -- 启动的sock文件</span><span class="token key attr-name">log-bin</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql-bin</span><span class="token key attr-name">basedir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/usr/local/mysql</span><span class="token key attr-name">datadir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/</span><span class="token key attr-name">pid-file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql.pid</span><span class="token key attr-name">user</span> <span class="token punctuation">=</span> <span class="token value attr-value">mysql</span><span class="token key attr-name">bind-address</span> <span class="token punctuation">=</span> <span class="token value attr-value">0.0.0.0</span><span class="token key attr-name">server-id</span> <span class="token punctuation">=</span> <span class="token value attr-value">1 #表示是本机的序号为1,一般来讲就是master的意思</span>skip-name-resolve<span class="token comment"># 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，</span><span class="token comment"># 则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求</span><span class="token comment">#skip-networking</span><span class="token key attr-name">back_log</span> <span class="token punctuation">=</span> <span class="token value attr-value">600</span><span class="token comment"># MySQL能有的连接数量。当主要MySQL线程在一个很短时间内得到非常多的连接请求，这就起作用，</span><span class="token comment"># 然后主线程花些时间(尽管很短)检查连接并且启动一个新线程。back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。</span><span class="token comment"># 如果期望在一个短时间内有很多连接，你需要增加它。也就是说，如果MySQL的连接数据达到max_connections时，新来的请求将会被存在堆栈中，</span><span class="token comment"># 以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。</span><span class="token comment"># 另外，这值（back_log）限于您的操作系统对到来的TCP/IP连接的侦听队列的大小。</span><span class="token comment"># 你的操作系统在这个队列大小上有它自己的限制（可以检查你的OS文档找出这个变量的最大值），试图设定back_log高于你的操作系统的限制将是无效的。</span><span class="token key attr-name">max_connections</span> <span class="token punctuation">=</span> <span class="token value attr-value">1000</span><span class="token comment"># MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下，因为如果连接数越多，介于MySQL会为每个连接提供连接缓冲区，就会开销越多的内存，所以要适当调整该值，不能盲目提高设值。可以过'conn%'通配符查看当前状态的连接数量，以定夺该值的大小。</span><span class="token key attr-name">max_connect_errors</span> <span class="token punctuation">=</span> <span class="token value attr-value">6000</span><span class="token comment"># 对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST。</span><span class="token key attr-name">open_files_limit</span> <span class="token punctuation">=</span> <span class="token value attr-value">65535</span><span class="token comment"># MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，</span><span class="token comment"># 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。</span><span class="token key attr-name">table_open_cache</span> <span class="token punctuation">=</span> <span class="token value attr-value">128</span><span class="token comment"># MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中，当MySQL在这个缓存中找不到相应信息时，才会去磁盘上读取。默认值64</span><span class="token comment"># 假定系统有200个并发连接，则需将此参数设置为200*N(N为每个连接所需的文件描述符数目)；</span><span class="token comment"># 当把table_open_cache设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上</span><span class="token key attr-name">max_allowed_packet</span> <span class="token punctuation">=</span> <span class="token value attr-value">4M</span><span class="token comment"># 接受的数据包大小；增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或MySQLd必须返回大的结果行时MySQLd才会分配更多内存。</span><span class="token comment"># 该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。</span><span class="token key attr-name">binlog_cache_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">1M</span><span class="token comment"># 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K</span><span class="token key attr-name">max_heap_table_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment"># 定义了用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。这个变量支持动态改变</span><span class="token key attr-name">tmp_table_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">16M</span><span class="token comment"># MySQL的heap（堆积）表缓冲大小。所有联合在一个DML指令内完成，并且大多数联合甚至可以不用临时表即可以完成。</span><span class="token comment"># 大多数临时表是基于内存的(HEAP)表。具有大的记录长度的临时表 (所有列的长度的和)或包含BLOB列的表存储在硬盘上。</span><span class="token comment"># 如果某个内部heap（堆积）表大小超过tmp_table_size，MySQL可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表。还可以通过设置tmp_table_size选项来增加临时表的大小。也就是说，如果调高该值，MySQL同时将增加heap表的大小，可达到提高联接查询速度的效果</span><span class="token key attr-name">read_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">2M</span><span class="token comment"># MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。</span><span class="token comment"># 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能</span><span class="token key attr-name">read_rnd_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment"># MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，</span><span class="token comment"># MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大</span><span class="token key attr-name">sort_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment"># MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。</span><span class="token comment"># 如果不能，可以尝试增加sort_buffer_size变量的大小</span><span class="token key attr-name">join_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment"># 联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享</span><span class="token key attr-name">thread_cache_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8</span><span class="token comment"># 这个值（默认8）表示可以重新利用保存在缓存中线程的数量，当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，</span><span class="token comment"># 如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，</span><span class="token comment"># 增加这个值可以改善系统性能.通过比较Connections和Threads_created状态的变量，可以看到这个变量的作用。(–&gt;表示要调整的值)</span><span class="token comment"># 根据物理内存设置规则如下：</span><span class="token comment"># 1G  —&gt; 8</span><span class="token comment"># 2G  —&gt; 16</span><span class="token comment"># 3G  —&gt; 32</span><span class="token comment"># 大于3G  —&gt; 64</span><span class="token key attr-name">query_cache_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment">#MySQL的查询缓冲大小（从4.0.1开始，MySQL提供了查询缓冲机制）使用查询缓冲，MySQL将SELECT语句和查询结果存放在缓冲区中，</span><span class="token comment"># 今后对于同样的SELECT语句（区分大小写），将直接从缓冲区中读取结果。根据MySQL用户手册，使用查询缓冲最多可以达到238%的效率。</span><span class="token comment"># 通过检查状态值'Qcache_%'，可以知道query_cache_size设置是否合理：如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，</span><span class="token comment"># 如果Qcache_hits的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；如果Qcache_hits的值不大，则表明你的查询重复率很低，</span><span class="token comment"># 这种情况下使用查询缓冲反而会影响效率，那么可以考虑不用查询缓冲。此外，在SELECT语句中加入SQL_NO_CACHE可以明确表示不使用查询缓冲</span><span class="token key attr-name">query_cache_limit</span> <span class="token punctuation">=</span> <span class="token value attr-value">2M</span><span class="token comment">#指定单个查询能够使用的缓冲区大小，默认1M</span><span class="token key attr-name">key_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">4M</span><span class="token comment">#指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，</span><span class="token comment"># 系统将开始换页并且真的变慢了。对于内存在4GB左右的服务器该参数可设置为384M或512M。通过检查状态值Key_read_requests和Key_reads，</span><span class="token comment"># 可以知道key_buffer_size设置是否合理。比例key_reads/key_read_requests应该尽可能的低，</span><span class="token comment"># 至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE 'key_read%'获得)。注意：该参数值设置的过大反而会是服务器整体效率降低</span><span class="token key attr-name">ft_min_word_len</span> <span class="token punctuation">=</span> <span class="token value attr-value">4</span><span class="token comment"># 分词词汇最小长度，默认4</span><span class="token key attr-name">transaction_isolation</span> <span class="token punctuation">=</span> <span class="token value attr-value">REPEATABLE-READ</span><span class="token comment"># MySQL支持4种事务隔离级别，他们分别是：</span><span class="token comment"># READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.</span><span class="token comment"># 如没有指定，MySQL默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED</span><span class="token key attr-name">log_bin</span> <span class="token punctuation">=</span> <span class="token value attr-value">mysql-bin</span><span class="token key attr-name">binlog_format</span> <span class="token punctuation">=</span> <span class="token value attr-value">mixed</span><span class="token key attr-name">expire_logs_days</span> <span class="token punctuation">=</span> <span class="token value attr-value">30 #超过30天的binlog删除</span><span class="token key attr-name">log_error</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql/mysql-error.log #错误日志路径</span><span class="token key attr-name">slow_query_log</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span><span class="token key attr-name">long_query_time</span> <span class="token punctuation">=</span> <span class="token value attr-value">1 #慢查询时间 超过1秒则为慢查询</span><span class="token key attr-name">slow_query_log_file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql/mysql-slow.log</span><span class="token key attr-name">performance_schema</span> <span class="token punctuation">=</span> <span class="token value attr-value">0</span>explicit_defaults_for_timestamp<span class="token comment">#lower_case_table_names = 1 #不区分大小写</span>skip-external-locking #MySQL选项以避免外部锁定。该选项默认开启<span class="token key attr-name">default-storage-engine</span> <span class="token punctuation">=</span> <span class="token value attr-value">InnoDB #默认存储引擎</span><span class="token key attr-name">innodb_file_per_table</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span><span class="token comment"># InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间</span><span class="token comment"># 独立表空间优点：</span><span class="token comment"># 1．每个表都有自已独立的表空间。</span><span class="token comment"># 2．每个表的数据和索引都会存在自已的表空间中。</span><span class="token comment"># 3．可以实现单表在不同的数据库中移动。</span><span class="token comment"># 4．空间可以回收（除drop table操作处，表空不能自已回收）</span><span class="token comment"># 缺点：</span><span class="token comment"># 单表增加过大，如超过100G</span><span class="token comment"># 结论：</span><span class="token comment"># 共享表空间在Insert操作上少有优势。其它都没独立表空间表现好。当启用独立表空间时，请合理调整：innodb_open_files</span><span class="token key attr-name">innodb_open_files</span> <span class="token punctuation">=</span> <span class="token value attr-value">500</span><span class="token comment"># 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300</span><span class="token key attr-name">innodb_buffer_pool_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">64M</span><span class="token comment"># InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.</span><span class="token comment"># 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.</span><span class="token comment"># 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%</span><span class="token comment"># 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.</span><span class="token comment"># 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,</span><span class="token comment"># 所以不要设置的太高.</span><span class="token key attr-name">innodb_write_io_threads</span> <span class="token punctuation">=</span> <span class="token value attr-value">4</span><span class="token key attr-name">innodb_read_io_threads</span> <span class="token punctuation">=</span> <span class="token value attr-value">4</span><span class="token comment"># innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4</span><span class="token comment"># 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64</span><span class="token key attr-name">innodb_thread_concurrency</span> <span class="token punctuation">=</span> <span class="token value attr-value">0</span><span class="token comment"># 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量</span><span class="token key attr-name">innodb_purge_threads</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span><span class="token comment"># InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操作是主线程的一部分，这意味着运行时它可能会堵塞其它的数据库操作。</span><span class="token comment"># 从MySQL5.5.X版本开始，该操作运行于独立的线程中,并支持更多的并发数。用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单</span><span class="token comment"># 独线程,默认情况下参数设置为0(不使用单独线程),设置为 1 时表示使用单独的清除线程。建议为1</span><span class="token key attr-name">innodb_flush_log_at_trx_commit</span> <span class="token punctuation">=</span> <span class="token value attr-value">2</span><span class="token comment"># 0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。</span><span class="token comment"># 主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1</span><span class="token comment"># 1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。</span><span class="token comment"># 2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。</span><span class="token comment"># 每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘</span><span class="token comment"># 默认值1是为了保证完整的ACID。当然，你可以将这个配置项设为1以外的值来换取更高的性能，但是在系统崩溃的时候，你将会丢失1秒的数据。</span><span class="token comment"># 设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。InnoDB在做恢复的时候会忽略这个值。</span><span class="token comment"># 总结</span><span class="token comment"># 设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2，如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能</span><span class="token key attr-name">innodb_log_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">2M</span><span class="token comment"># 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间</span><span class="token key attr-name">innodb_log_file_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">32M</span><span class="token comment"># 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间</span><span class="token key attr-name">innodb_log_files_in_group</span> <span class="token punctuation">=</span> <span class="token value attr-value">3</span><span class="token comment"># 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</span><span class="token key attr-name">innodb_max_dirty_pages_pct</span> <span class="token punctuation">=</span> <span class="token value attr-value">90</span><span class="token comment"># innodb主线程刷新缓存池中的数据，使脏数据比例小于90%</span><span class="token key attr-name">innodb_lock_wait_timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">120</span> <span class="token comment"># InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒</span><span class="token key attr-name">bulk_insert_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment"># 批量插入缓存大小， 这个参数是针对MyISAM存储引擎来说的。适用于在一次性插入100-1000+条记录时， 提高效率。默认值是8M。可以针对数据量的大小，翻倍增加。</span><span class="token key attr-name">myisam_sort_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment"># MyISAM设置恢复表之时使用的缓冲区的尺寸，当在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区</span><span class="token key attr-name">myisam_max_sort_file_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">10G</span><span class="token comment"># 如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出</span><span class="token key attr-name">myisam_repair_threads</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span><span class="token comment"># 如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内) </span><span class="token key attr-name">interactive_timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">28800</span><span class="token comment"># 服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。默认值：28800秒（8小时）</span><span class="token key attr-name">wait_timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">28800</span><span class="token comment"># 服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，</span><span class="token comment"># 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。参数默认值：28800秒（8小时）</span><span class="token comment"># MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL Server处理完相应的操作后，</span><span class="token comment"># 应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，</span><span class="token comment"># 最终肯定会达到MySQL Server的连接上限数，这会报'too many connections'的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。</span><span class="token comment"># 在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，</span><span class="token comment"># 可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqldump</span><span class="token punctuation">]</span></span>quick<span class="token key attr-name">max_allowed_packet</span> <span class="token punctuation">=</span> <span class="token value attr-value">16M #服务器发送和接受的最大包长度</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">myisamchk</span><span class="token punctuation">]</span></span><span class="token key attr-name">key_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token key attr-name">sort_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token key attr-name">read_buffer</span> <span class="token punctuation">=</span> <span class="token value attr-value">4M</span><span class="token key attr-name">write_buffer</span> <span class="token punctuation">=</span> <span class="token value attr-value">4M</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7-install-redis</title>
      <link href="/2021/07/06/centos7-install-redis/"/>
      <url>/2021/07/06/centos7-install-redis/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Windows-下安装-Redis"><a href="#一、Windows-下安装-Redis" class="headerlink" title="一、Windows 下安装 Redis"></a>一、Windows 下安装 Redis</h2><p>先去官网下载源文件压缩包，解压到自己创建的指定目录下，建议目录绝对路径中不要出现中文。</p><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>使用 cmd，将 Redis 作为服务安装到 Windows 中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 进入 redis 解压目录下redis-server --service-install redis.windows.conf# 启动服务redis-server --service-start# 停止服务redis-server --service-stop# 卸载服务redis-server --service-uninstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、查看版本"><a href="#2、查看版本" class="headerlink" title="2、查看版本"></a>2、查看版本</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">redis-server --version # 或者 redis-server -vredis-cli --version # 或 redis-cli -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>严格上说：通过　redis-cli 得到的结果应该是redis-cli 的版本，但是 redis-cli 和redis-server，一般都是从同一套源码编译出的。所以应该是一样的。</p><h2 id="二、Linux-中安装-Redis"><a href="#二、Linux-中安装-Redis" class="headerlink" title="二、Linux 中安装 Redis"></a>二、Linux 中安装 Redis</h2><h3 id="1、两种方式"><a href="#1、两种方式" class="headerlink" title="1、两种方式"></a>1、两种方式</h3><ul><li>从官网下载源文件压缩包，然后通过工具或协议上传到 Linux 服务器</li><li>使用 Linux 中的命令工具直接拉取</li></ul><h3 id="2、前置条件"><a href="#2、前置条件" class="headerlink" title="2、前置条件"></a>2、前置条件</h3><ul><li><p>安装 C++ 的编译器：CentOS 中，C 的编译器是 gcc，C++ 的编译器是 g++</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y install gcc-c++# 出现错误，可以多看看 redis 的 ReadMe.md 文件make MALLOC=libc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3、开始安装"><a href="#3、开始安装" class="headerlink" title="3、开始安装"></a>3、开始安装</h3><p>在此之前，我们应该了解 Linux 的各个目录代表的含义。</p><p>我习惯于将自己下载的软件解压并安装到 <code>/usr/local/ </code> 目录下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 进入目录cd /usr/local# 先到官网看看长期稳定版本的版本号，wget https://download.redis.io/releases/redis-6.2.3.tar.gz# 解压tar xzf redis-6.2.3.tar.gz# 解压后，压缩包可以自己备份以下，以便以后使用，也可以删掉# 进入解压后的目录下，开始编译源文件cd ./redis-6.2.3make# 切换到/usr/local/redis-6.2.3/src目录cd src/# 开始安装 Redismake install# 安装完成之后，我们可以创建两个文件夹用户存放 配置文件 和 常用的命令cd ../mkdir etcmkdir bin# 备份配置文件cp redis.conf ./etc/# 转移常用命令mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server redis-sentinel /usr/local/redis-6.2.3/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、修改配置文件"><a href="#4、修改配置文件" class="headerlink" title="4、修改配置文件"></a>4、修改配置文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 修改配置文件cd ./excvim redis.conf# redis.conf主要修改以下 4 点：# 1.将 daemonize no 改为 daemonize yes，表示需要在后台运行# 2. 将 bind 127.0.0.1 这一行注释掉，如果不需要远程连接服务器，这个可以不用注释，它的意思是只允许本机访问# 3. 将 protect-mode yes 改为 protect-mode no，如果不远程连接则不需要注释# 4. 添加 requirepass 123456 设置密码(默认密码为空)，如果只是在本机测试，也不需要设置密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、启动-Redis-服务并测试"><a href="#5、启动-Redis-服务并测试" class="headerlink" title="5、启动 Redis 服务并测试"></a>5、启动 Redis 服务并测试</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 依据指定配置文件启动 Rediscd /usr/local/redis-6.2.3/binredis-server ../etc/redis.conf# 使用 redis-cli 连接本机 Redis 服务，默认端口 6379redis-cli# 认证后测试auth 123456set name naivekyoget name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>draft-test</title>
      <link href="/2021/07/06/draft-test/"/>
      <url>/2021/07/06/draft-test/</url>
      
        <content type="html"><![CDATA[<h2 id="一、测试草稿-发布"><a href="#一、测试草稿-发布" class="headerlink" title="一、测试草稿-发布"></a>一、测试草稿-发布</h2><p>测试流程：</p><ol><li>创建草稿</li><li>发布草稿</li><li>查看结果</li></ol><h2 id="二、测试修改-发布"><a href="#二、测试修改-发布" class="headerlink" title="二、测试修改-发布"></a>二、测试修改-发布</h2><p>测试流程：</p><ol><li>修改已有文件</li><li>发布</li><li>查看结果</li></ol>]]></content>
      
      
      <categories>
          
          <category> BlogTest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/05/hello-world/"/>
      <url>/2021/07/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
