<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>centos7_install_jenkins</title>
      <link href="/2021/07/07/centos7-install-jenkins/"/>
      <url>/2021/07/07/centos7-install-jenkins/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1、Jenkins-是什么"><a href="#1、Jenkins-是什么" class="headerlink" title="1、Jenkins 是什么"></a>1、Jenkins 是什么</h2><p>Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。</p><h2 id="2、CI-CD-是什么"><a href="#2、CI-CD-是什么" class="headerlink" title="2、CI/CD 是什么"></a>2、CI/CD 是什么</h2><p> <code>CI(Continuous integration)</code>，中文意思是持续集成。它强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。借用网络图片对 CI 加以理解。</p><p><img src="https://naivekyo.oss-cn-hangzhou.aliyuncs.com/blog%27image/ci.png"></p><p><code>CD(Continuous Delivery)</code>， 中文意思持续交付。它是在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境(类生产环境)中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境。下图反应的是 CI/CD 的大概工作模式。</p><p><img src="https://naivekyo.oss-cn-hangzhou.aliyuncs.com/blog%27image/cd.png"></p><h1 id="二、安装-Jenkins"><a href="#二、安装-Jenkins" class="headerlink" title="二、安装 Jenkins"></a>二、安装 Jenkins</h1><p>环境：CentOS7</p><h2 id="1、前置"><a href="#1、前置" class="headerlink" title="1、前置"></a>1、前置</h2><ul><li><p>官网下载 LTS 版本的 war 包：<a href="https://www.jenkins.io/">https://www.jenkins.io/</a></p></li><li><p>上传到服务器    </p></li><li><p>运行 war 包，将其作为后台进程挂起，输出日志为 <code>jenkins.out</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> java -jar /usr/local/jenkins/jenkins.jar <span class="token operator">&gt;</span> /usr/local/jenkins/jenkins.out <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>访问 Jenkins 的管理页面：Linux IP + 8080 端口（<strong>需要开放端口</strong>）</p></li><li><p>登录密码位置：<code>/root/.jenkins/secrets/initialAdminPassword</code></p></li><li><p>获取密码后输入点击继续，会进入下载插件的界面，由于需要从外网下载，速度较慢，我们需要修改为国内的镜像：（先关掉浏览器界面 并 杀死 Linux 中的 jenkins 进程）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置国内镜像</span><span class="token comment"># 进入 jenkins 工作目录</span><span class="token builtin class-name">cd</span> /root/.jenkins/updates<span class="token comment"># 杀死进程: 先查 PID 然后 kill</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> jenkins<span class="token function">kill</span> -s <span class="token environment constant">TERM</span> <span class="token operator">&lt;</span>PID<span class="token operator">&gt;</span><span class="token comment"># 直接修改配置文件 default.json</span><span class="token comment"># 由于该文件内容太多，直接编辑不好修改，我们可以运行脚本进行修改</span><span class="token function">sed</span> -i <span class="token string">'s/http:Wupdates.jenkins-ci.orgVdownload/https:Wmirrors.tuna.tsinghua.edu.cnVjenkins/g'</span> default.json <span class="token operator">&amp;&amp;</span> <span class="token function">sed</span> -i <span class="token string">'s/http:Wwww.google.com/https:Wwww.baidu.com/g'</span> default.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启 jenkins 下载插件：<strong>选择安装推荐的插件</strong></p></li><li><p>安装完成之后，创建管理员用户：</p></li><li><p>登录</p></li><li><p>进入管理页面后，开始配置 Jenkins</p><p>Manager Jenkins -&gt; Global Tool Configuration</p><p>分别配置 ==JDK、Maven、Git==</p></li></ul><h2 id="2、Jenkins-自动化配置"><a href="#2、Jenkins-自动化配置" class="headerlink" title="2、Jenkins 自动化配置"></a>2、Jenkins 自动化配置</h2><p>准备工作：</p><ul><li><p>服务器需安装  ==Docker==</p></li><li><p>需要在工程中添加 <strong>Dockerfile</strong> （和 pom 文件在同一级）</p></li></ul><blockquote><p>前置工作：Dockerfile</p></blockquote><p>Dockerfile：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取 JDK 环境</span>FROM openjdk:8-jdk-alpine<span class="token comment"># 缓存处理</span>VOLUME /tmp<span class="token comment"># 重命名 jar 包</span>COPY ./target/jenkinsdemo-0.0.1-SNAPSHOT.jar demojenkins.jar<span class="token comment"># 执行 jar 包</span>ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/demojenkins.jar"</span>, <span class="token string">"&amp;"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 pom.xml </p><ul><li>更改打包类型为 pom</li><li>添加 maven 插件</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.naivekyo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jenkinsdemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>jenkinsdemo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、Jenkins-管理界面创建自动化任务"><a href="#3、Jenkins-管理界面创建自动化任务" class="headerlink" title="3、Jenkins 管理界面创建自动化任务"></a>3、Jenkins 管理界面创建自动化任务</h2><ul><li>Jenkins dashboard -&gt; 新建 Item</li><li>填写任务名称：可随意</li><li>一般选择 <strong>Freestyle project</strong> 即可</li><li>下一步：源代码管理，这里我们将没有编译的代码（mvn：clean）上传到远程仓库中，Jenkins 支持两种仓库 GitHub 和 gitee，但是我只找到了 GitHub 一种</li></ul><hr><blockquote><p>使用 Git 将 springboot 项目上传到 GitHub</p></blockquote><ol><li>在 GitHub 上新建仓库</li><li>记录下仓库的地址，例如 <a href="https://github.com/NaiveKyo/JenkinsTest.git">https://github.com/NaiveKyo/JenkinsTest.git</a></li><li>本机打开 git 的客户端，进入自己要提交的工程的目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 举个例子</span><span class="token comment"># 工程目录下右键 打开 git bash here</span><span class="token comment"># 第一步，初始化</span><span class="token function">git</span> init<span class="token comment"># 第二步，上传，这里直接是将所有文件添加到仓库中，如果只想添加指定的文件，可以把 . 换成特定的文件名称</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 第三步，提交到本地仓库</span><span class="token function">git</span> commit -m <span class="token string">"description"</span> <span class="token comment"># 表示提交的注释</span><span class="token comment"># 可能需要输入 GitHub 账户名和密码</span><span class="token comment"># 可以使用以下方式配置全局信息，以后比较方便</span><span class="token function">git</span> config --global user.email <span class="token string">"Your Email"</span><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span><span class="token comment"># 第四步，和远程仓库相关联</span><span class="token function">git</span> remote <span class="token function">add</span> origin https://仓库url<span class="token comment"># 最后，上传到远程仓库，指定分支 master</span><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>将本地代码上传到远程仓库 <a href="https://github.com/NaiveKyo/JenkinsTest.git">https://github.com/NaiveKyo/JenkinsTest.git</a></li><li>Jenkins Dashboard 新建 Item，设置好配置信息</li><li><strong>注意：开始构建之前，必须开启 Docker</strong></li><li>开始构建项目</li><li>Build Success</li></ul><h2 id="4、Jenkins-执行任务时遇到的错误"><a href="#4、Jenkins-执行任务时遇到的错误" class="headerlink" title="4、Jenkins 执行任务时遇到的错误"></a>4、Jenkins 执行任务时遇到的错误</h2><p>git 一直无法拉取远程仓库地址：</p><blockquote><p>推荐方案一，剩下两种没测试</p></blockquote><ul><li><p>尝试过配置 ssh，但是无效</p></li><li><p><strong>最终解决方案</strong>：</p><ul><li><strong>缺少插件</strong>：curl-devel ：Jenkins 通过 git 发起 http 请求需要使用工具 <code>curl-devel</code>（我只安装了 wget）</li><li>重新编译 git</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/git/git_x.x.x./configuration --prefix<span class="token operator">=</span>/usr/local/git<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>方式二：<code>yum install git-http</code></p></li><li><p>方式三：git 代替 https <code>git clone --recursive git://github.com/用户名/仓库地址</code></p></li></ul><h1 id="三、补充知识"><a href="#三、补充知识" class="headerlink" title="三、补充知识"></a>三、补充知识</h1><h2 id="1、Linux-知识"><a href="#1、Linux-知识" class="headerlink" title="1、Linux 知识"></a>1、Linux 知识</h2><h3 id="（1）nohup"><a href="#（1）nohup" class="headerlink" title="（1）nohup"></a>（1）nohup</h3><p>nohup 命令全程 no hang up，用于在系统后台不挂断的运行命令，退出终端不会影响程序的运行。</p><p>nohup 命令，在默认情况下（非重定向时），会输出一个名叫 <code>nohup.out</code> 的文件到当前目录下，如果当前目录的 nohup.out 不可写，输出重定向到 <code>$HOME/nohup.out</code> 文件中。</p><h3 id="（2）标准输入、输出"><a href="#（2）标准输入、输出" class="headerlink" title="（2）标准输入、输出"></a>（2）标准输入、输出</h3><ul><li>标准输入：stdin  代码 0  用 &lt; 或 &lt;&lt; 表示</li><li>标准输出：stdout 代码 1 用 &gt; 或 &gt;&gt; 表示</li><li>标准错误输出：stderr 代码 2 用 2&gt; 或 2&gt;&gt; 表示</li></ul><p>将命令执行的正确信息和错误信息做处理：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 分别存放到不同的文件</span><span class="token function">find</span> /home -name .bashrc <span class="token operator">&gt;</span> /right.txt <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> /error.ext<span class="token comment"># 丢弃错误信息，只保存正确信息</span><span class="token function">find</span> /home -name .bashrc <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> /dev/null<span class="token comment"># 将正确和错误的信息输出到同一个文件</span><span class="token function">find</span> /home -name .bashrc <span class="token operator">&gt;</span> /right.txt <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token comment"># 或者</span><span class="token function">find</span> /home -name .bashrc <span class="token operator">&amp;&gt;</span> /right.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标准输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 cat 命令简单的创建一个文件</span><span class="token function">cat</span> <span class="token operator">&gt;</span> text.txt<span class="token comment"># 然后输入消息，退出使用 ctrl + d</span><span class="token comment"># 使用 cat 和 &lt; 创建文件，可以实现类似复制文件的作用</span><span class="token function">cat</span> <span class="token operator">&gt;</span> text.txt <span class="token operator">&lt;</span> ./message.txt<span class="token comment"># 测试 &lt;&lt; 该符号代表 `结束的输入字符`</span><span class="token function">cat</span> <span class="token operator">&gt;</span> text.txt <span class="token operator">&lt;&lt;</span> <span class="token string">"eof"</span><span class="token comment"># 输入消息，最后一行是 eof 表示退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）Linux-中的-amp"><a href="#（3）Linux-中的-amp" class="headerlink" title="（3）Linux 中的 &amp;"></a>（3）Linux 中的 &amp;</h3><p><strong>幕后工作：</strong>在命令结尾加上 &amp; 表示将这个任务放到后台执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 递归的复制文件目录，假如目录很大，需要很久，可以放到后台执行</span><span class="token function">cp</span> -R original/dir/ backup/dir/ <span class="token operator">&amp;</span><span class="token comment"># 回车执行后，会显示一个 进程 ID 号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>任务被放到后台执行之后，就可以立即继续在同一个终端上工作了，甚至关闭终端也不影响这个任务的正常执行。需要注意的是，如果要求这个任务输出内容到标准输出中（例如 <code>echo</code> 或 <code>ls</code>），即使使用了 <code>&amp;</code>，也会等待这些输出任务在前台运行完毕。</p><p>当使用 <code>&amp;</code> 将一个进程放置到后台运行的时候，Bash 会提示这个进程的进程 ID。在 Linux 系统中运行的每一个进程都有一个唯一的进程 ID，你可以使用进程 ID 来暂停、恢复或者终止对应的进程，因此进程 ID 是非常重要的。</p><p>当使用该命令启动一个后台进程时，我们可以在当前终端下使用如下几个命令管理后台进程：</p><ul><li><p><code>jobs</code> 命令可以显示当前终端正在运行的进程，包括前台和后台运行的进程。它对每一个正在执行的进程任务分配一个序号（这个序号不是进程 ID），可以使用这些序号来引用各个进程任务：</p></li><li><p><code>fg</code> 命令可以将后台运行的进程任务放到前台运行，这样可以比较方便地进行交互。根据 <code>jobs</code> 命令提供的进程任务序号，再在前面加上 <code>%</code> 符号，就可以把相应的进程任务放到前台运行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 jobs 显示的标号为 1 的进程放到前台运行</span><span class="token function">fg</span> % <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果这个进程任务是暂停状态，fg 命令可以将它启动起来</p></li><li><p><code>ctrl + z</code> 可以将前台运行的任务暂停，仅仅是暂停而不是终止。当使用 <code>fg</code> 或者 <code>bg</code> 命令将任务重新启动起来的时候，任务会从暂停的地方继续执行。但 <code>sleep</code> 命令是一个特例，<code>sleep</code> 任务被暂停的时间会计算在 <code>sleep</code> 时间之内。因为 <code>sleep</code> 命令依据的是系统时钟的时间，而不是实际运行的时间。也就是说，如果运行了 <code>sleep 30</code> ，然后将任务暂停 30 秒以上，那么任务恢复执行的时候会立即终止并退出。</p></li><li><p><code>bg</code> 命令会将任务防止到后台运行，如果任务是暂停的，也会被启动起来</p></li></ul><h3 id="（4）Linux-的-kill-命令"><a href="#（4）Linux-的-kill-命令" class="headerlink" title="（4）Linux 的 kill 命令"></a>（4）Linux 的 kill 命令</h3><p>前面介绍的几个命令适合在同一个终端中使用，如果启动进程任务的终端关闭了，就无法使用了。</p><p>如果要在另一个终端管理后台进程，就需要使用其他工具，例如 <code>kill</code></p><ul><li><p>暂停后台进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先查进程号</span><span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> 进程名<span class="token comment"># 暂停进程 等同于 ctrl + z</span><span class="token function">kill</span> -s STOP <span class="token operator">&lt;</span>PID<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>把暂停的进程启动：<code>kill -s CONT &lt;PID&gt;</code></p></li><li><p>终止进程：<code>kill -s TERM &lt;PID&gt;</code></p></li><li><p>如果进程不相应 TERM 信号并拒绝退出，可以发送 KILL 信号强制终止进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> -s KILL <span class="token operator">&lt;</span>PID<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制终止进程可能会有一定的风险，但如果遇到进程无节制消耗资源的情况，这样的信号还是有用的</p></li><li><p>如果不确定进程 ID 是否存在，可以这样 <code>ps x | grep jenkins</code></p></li><li><p>将 <code>ps</code> 和 <code>grep</code> 结合起来的命令：<code>pgrep 字符串</code>，它可以把包含指定字符的进程 ID 列出来</p></li><li><p>加一些参数 ：<code>pgrep -lx 字符串</code>，这样就可以把名称也显示出来，如果想了解更多的细节，可以这样：<code>pgrep -ax</code>，更多请 –help</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Deploy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7_install_docker</title>
      <link href="/2021/07/07/centos7-install-docker/"/>
      <url>/2021/07/07/centos7-install-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>容器的概念在 Linux 中早就有了，并不是 Docker 提出了容器的概念，它是一种轻量级的虚拟化技术，现在常用于打包项目环境，方便我们部署。</p><h1 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h1><h2 id="1、安装前准备"><a href="#1、安装前准备" class="headerlink" title="1、安装前准备"></a>1、安装前准备</h2><p>LInux 内核版本，官方建议 3.10 以上。</p><ul><li>查看当前内核版本：<code>uname -r</code></li></ul><p><strong>如果不满足条件，可以更新系统：</strong></p><ul><li><code>yum -y update</code>（<strong>谨慎使用</strong>）：升级所有包的同时也升级软件和系统内核</li><li><code>yum -y upgrade</code>：只升级所有包，不升级软件和系统内核</li></ul><p>如果之前安装过 Docker，卸载旧版本：</p><p><code>yum remove docker docker-common docker-selinux docker-engine</code></p><h2 id="2、安装-Docker"><a href="#2、安装-Docker" class="headerlink" title="2、安装 Docker"></a>2、安装 Docker</h2><ul><li><p>安装相关依赖</p><p>yum-utils 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖</p><p><code>yum install -y yum-tuils device-mapper-persistent-data lvm2</code></p></li><li><p>查看已经安装的包 <code>yum list installed</code></p></li><li><p>设置 yum 源，两个都可以使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum-config-manager --add-repo http://download.docker.com/linux/centos/docker-ce.repo（中央仓库）yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo（阿里仓库）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>选择 Docker 版本并安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看可用版本</span>yum list docker-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r<span class="token comment"># 选择一个版本安装。当然也可以默认安装，就是最新版</span>yum <span class="token function">install</span> docker-ce<span class="token comment"># 启动 Docker 并设置开机自启</span>systemctl start dockersystemctl <span class="token builtin class-name">enable</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7-install-git</title>
      <link href="/2021/07/06/centos7-install-git/"/>
      <url>/2021/07/06/centos7-install-git/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>CentOS 版本的 Linux，可能默认就带有 git，但是其 yum 仓库中支持的 Git 版本最高是 1.8.1。</p><p>如果直接使用命令 <code>yum -y install git</code>，则安装的是其默认的，我们需要安装最新版的。</p><p>查看版本 默认支持的版本 <code>yum info git</code></p><h2 id="二、安装最新版-Git"><a href="#二、安装最新版-Git" class="headerlink" title="二、安装最新版 Git"></a>二、安装最新版 Git</h2><h3 id="1、卸载旧的-Git、安装新的"><a href="#1、卸载旧的-Git、安装新的" class="headerlink" title="1、卸载旧的 Git、安装新的"></a>1、卸载旧的 Git、安装新的</h3><ul><li><p>如果系统中自带的有 Git，先卸载：<code>yum remove git</code></p></li><li><p>想要安装任意版本的 Git，我们可以使用 <code>wget</code> 或者 <code>curl</code> 工具到对应的仓库中获取 Git</p></li><li><p>推荐网站：<code>https://mirrors.edge.kernel.org/pub/software/scm/git/</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 例如这里安装的 2.18.4 版本的 git</span><span class="token function">wget</span> https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.18.4.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>由于我们没有使用 yum 安装，所以 Git 所需要的依赖只能自己来安装了，感兴趣可以试试查看依赖 </p></li><li><p><code>yum deplist git</code></p></li><li><p>安装依赖及下面的步骤</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装依赖</span>yum <span class="token function">install</span> -y zlib-devel bzip2-devel openssl-devel ncurses-devel gcc perl-ExtUtils-MakeMaker package<span class="token comment"># 解压 Git</span><span class="token function">tar</span> -zxvf ./git-2.18.4.tar.gz<span class="token comment"># 安装</span><span class="token builtin class-name">cd</span> ./git-2.18.4/<span class="token comment"># 这里 /usr/local/git 是我创建的放置 git 的地方 /usr/local/git/git-2.18.4</span>./configure --prefix<span class="token operator">=</span>/usr/local/git all<span class="token comment"># 编译并安装 git 注意这里需要 c++ 的编译器，如果没有就 yum install gcc-c++</span><span class="token comment"># 这里默认安装到 /usr/local 下，可以指定目录，例如</span><span class="token comment"># make install /usr/local/mygit</span><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、Git-相关配置"><a href="#2、Git-相关配置" class="headerlink" title="2、Git 相关配置"></a>2、Git 相关配置</h3><ul><li><p>配置环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">${JAVA_HOME}</span>/bin:<span class="token variable">${MAVEN_HOME}</span>/bin:/usr/local/git/bin<span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果想要卸载 Git，安装其他的版本，可以这样：<code>yum remove git</code></p></li><li><p>配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置基本信息</span><span class="token function">git</span> config --global user.name <span class="token string">"username"</span><span class="token function">git</span> config --global user.email QQ邮箱<span class="token comment"># 查看配置</span><span class="token function">git</span> config --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="三、补充小知识"><a href="#三、补充小知识" class="headerlink" title="三、补充小知识"></a>三、补充小知识</h2><blockquote><p>Linux 安装软件源码包的流程：</p></blockquote><p>一般会涉及到三个步骤：</p><p>一般会涉及到三个步骤：</p><ol><li><p><code>./configure</code></p><ul><li><p>该步骤主要用来检测系统的配置、环境以及相关依赖，如果缺少相关依赖，该脚本会终止执行，软件安装失败</p><p>当该脚本执行完成之后，会生成一个 Makefile 文件，该文件规定了用什么编译器、编译参数等等，描述了文件编译的互相依赖关系</p></li></ul></li><li><p><code>make</code></p><p>该步骤主要用来编译源代码，make 命令会从 Makefile 文件中读取相关指令，编译完成后会生成可执行文件</p></li><li><p><code>make install</code></p><p>该步骤主要用来安装软件，make install 命令会从 Makefile 文件中读取相关指令，然后将软件安装到指定的位置， 默认安装位置是 <code>/usr/local</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7-install-jdk</title>
      <link href="/2021/07/06/centos7-install-jdk/"/>
      <url>/2021/07/06/centos7-install-jdk/</url>
      
        <content type="html"><![CDATA[<h2 id="一、卸载-Open-JDK"><a href="#一、卸载-Open-JDK" class="headerlink" title="一、卸载 Open-JDK"></a>一、卸载 Open-JDK</h2><p>有的 Linux 系统可能已经安装了 open-jdk，它是 jdk 开源之前的版本，已经不在维护了，我们可以卸载它</p><ul><li><p>使用命令 <code>rpm -qa | grep java</code> 查询系统中和 java 相关的文件，一个个删除</p></li><li><p>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64<span class="token function">rpm</span> -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64<span class="token function">rpm</span> -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64<span class="token function">rpm</span> -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>检查是否已经删除成功：输入 <strong>java -version</strong></p></li><li><p>如果没有删除完，就使用 yum 删除：<strong>yum -y remove</strong></p></li></ul><h2 id="二、安装稳定的-JDK"><a href="#二、安装稳定的-JDK" class="headerlink" title="二、安装稳定的 JDK"></a>二、安装稳定的 JDK</h2><p>官网：<a href="http://www.oracle.com/">http://www.oracle.com</a></p><p>下载相应的 Linux 版本后，做好备份，开始解压</p><p>可以将 jdk 复制一份放到 <code>/usr/local/src</code> 做备份</p><p>在 <code>/usr/java</code> 中解压 jdk（创建一个 java 目录）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tar</span> -zxvf jdk-8u281-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有权限就：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> jdk-8u281-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果实在不行，就进入 root 用户进行操作</p><p>解压完成后开始设置系统环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span class="token comment"># 最后面添加下列</span><span class="token comment"># java environment</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/java/jdk1.8.0_281<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">${JAVA_HOME}</span>/jre/lib/rt.jar:<span class="token variable">${JAVA_HOME}</span>/lib/dt.jar:<span class="token variable">${JAVA_HOME}</span>/lib/tools.jar<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">${JAVA_HOME}</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置完成后，重新编译配置文件：<code>source /etc/profile</code></p><p>最后检查是否成功安装：<code>java -version</code> 如何输出了 java 的版本信息就说明成功了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7-install-mysql</title>
      <link href="/2021/07/06/centos7-install-mysql/"/>
      <url>/2021/07/06/centos7-install-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="一、官方推荐"><a href="#一、官方推荐" class="headerlink" title="一、官方推荐"></a>一、官方推荐</h2><p>官方文档：<a href="https://dev.mysql.com/doc/mysql-installation-excerpt/5.6/en/linux-installation-yum-repo.html">https://dev.mysql.com/doc/mysql-installation-excerpt/5.6/en/linux-installation-yum-repo.html</a>    </p><p>根据官网推荐安装 <code>yum 仓库</code></p><p>注意自己的 Linux 版本，例如我用的 CentOS7 7.x 可以下载对应的 Oracle Linux 7 版本的 yum 仓库配置</p><p>下载地址：<a href="https://dev.mysql.com/downloads/repo/yum/">https://dev.mysql.com/downloads/repo/yum/</a></p><p>然后输入以下命令更新自己的本地 yum 仓库列表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum localinstall mysql57-community-release-el7-<span class="token punctuation">{</span>version-number<span class="token punctuation">}</span>.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以输入以下命令检查是否成功更新本地 yum 仓库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum repolist enabled <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"mysql.*-community.*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新成功后可以直接安装，官方下载的 yum 仓库配置，默认开启当前 GA 版本的支持，如果想更换版本可以这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先查看哪些版本被启用</span>shell<span class="token operator">&gt;</span> yum repolist all <span class="token operator">|</span> <span class="token function">grep</span> mysql<span class="token comment"># 然后可以更换版本, 这里假如当前GA版本为 5.7，想要更换为 5.6 </span>shell<span class="token operator">&gt;</span> <span class="token function">sudo</span> yum-config-manager --disable mysql57-communityshell<span class="token operator">&gt;</span> <span class="token function">sudo</span> yum-config-manager --enable mysql56-community<span class="token comment"># 一般都不用更换版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了使用命令更改，还可以直接找到相关文件进行修改：</p><p> <code>/etc/yum.repos.d/mysql-community.repo</code> </p><p>如果是 EL8 版本的内核，还需要考虑其他情况，具体参见官方文档</p><h2 id="二、默认安装（推荐）"><a href="#二、默认安装（推荐）" class="headerlink" title="二、默认安装（推荐）"></a>二、默认安装（推荐）</h2><p>安装命令：</p><p>两种方式，可以安装到默认的位置，也可以自定义（不推荐，比较麻烦）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认</span><span class="token function">sudo</span> yum -y <span class="token function">install</span> mysql-community-server<span class="token comment"># 自定义</span><span class="token function">sudo</span> yum -c /etc/yum --releasever<span class="token operator">=</span>/ --installroot<span class="token operator">=</span>/usr/local/mysql-8.0 -y <span class="token function">install</span> mysql-community-server<span class="token comment"># 参数</span><span class="token comment"># -c 是读取 yum 的配置文件路径</span><span class="token comment"># --releasever=/</span><span class="token comment">#  我们可以在 yum 配置源的文件中找到很多这样的字符 $releasever 和 $basearch</span><span class="token comment">#$releasever 代表当前系统的发行版本，可以通过 rpm -qi centos-release</span><span class="token comment">#$basearch 是我们的系统硬件架构（CPU 指令集），可以使用命令 arch 得到</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yum 虽然很好的解决了 软件依赖 的问题，但是不能查看软件的位置，我们可以使用 rpm 来查看相关信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看软件包安装的目录和文件（包括了可执行程序、配置文件和帮助文档）。</span><span class="token function">rpm</span> -ql mysql-community-server<span class="token comment"># 查看已安装软件包的详细信息。 和 yum info 有点类似</span><span class="token function">rpm</span> -qi mysql-community-server<span class="token comment"># 查看已安装软件包的配置</span><span class="token function">rpm</span> -qc mysql-community-server <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到默认安装后，mysql 的相关文件的位置是严格遵守 Linux 目录的 <code>FHS</code>。</p><h3 id="1、开启-MySQL-服务"><a href="#1、开启-MySQL-服务" class="headerlink" title="1、开启 MySQL 服务"></a>1、开启 MySQL 服务</h3><p>这里要提一下：</p><p>MySQL 官方推荐创建 mysql 用户和用户组来管理 mysql 服务。</p><p>我们采用的 yum 方式安装 mysql-community-server ，已经默认给我们创建好了对应的系统账户和组，所以可以不用管这一步。</p><p>使用 <code>cat /etc/passwd | grep mysql</code> 可以看到 mysql 系统账户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建组</span><span class="token function">groupadd</span> mysql<span class="token comment"># 创建用户</span><span class="token function">useradd</span> -r -g mysql -s /bin/false mysql<span class="token comment"># 注意，我们只需要创建一个账户用于管理 mysql 服务，所以可以这样做</span><span class="token comment"># -r 创建系统账户，不会给它生成家目录</span><span class="token comment"># -g 属于 mysql 组</span><span class="token comment"># -s 指定该系统账户持有的 shell 为 /bin/false</span><span class="token comment">#    </span><span class="token comment"># 最后还需要给相应的mysql文件设置权限：chmod 750 mysql-files</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以开启服务了：</p><p>分为两种情况：</p><ul><li><p>初始化随机密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认安装，环境变量已经配置好了</span>mysqld --initialize --user<span class="token operator">=</span>mysql<span class="token comment"># 使用 systemctl 开启服务</span>systemctl start mysqld<span class="token comment"># 查看初始化后随机生成的密码</span><span class="token function">tail</span> /var/log/mysqld.log <span class="token operator">|</span> <span class="token function">grep</span> temporary<span class="token comment"># 可以看到</span><span class="token punctuation">[</span>Note<span class="token punctuation">]</span> <span class="token punctuation">[</span>MY-010454<span class="token punctuation">]</span> <span class="token punctuation">[</span>Server<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost: <span class="token operator">&lt;</span>6za-KXb<span class="token operator">&amp;</span>j<span class="token comment">#p</span><span class="token comment"># 后面就是密码</span><span class="token comment"># 登录数据库并修改密码</span>mysql -u root -penter password: （注：这里输入密码不显示，输入刚刚的随机密码就好了）<span class="token comment"># 登录成功后修改密码才能执行下一步操作, 这里我设置密码为 123456</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'123456'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不生成密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果想不生成随机密码，可以使用如下命令初始化数据目录</span>mysqld --initialize-insecure --user<span class="token operator">=</span>mysql<span class="token comment"># 开启服务后，登录时使用</span>mysql -u root --skip-password<span class="token comment"># 然后修改密码</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'root-password'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、修改-MySQL-配置文件"><a href="#2、修改-MySQL-配置文件" class="headerlink" title="2、修改 MySQL 配置文件"></a>2、修改 MySQL 配置文件</h3><p>默认安装一般 MySQL 服务启动时加载的配置参数在 <code>/etc/my.cnf</code> 文件中，我们可以修改其中的配置：</p><p>下面列举最简单的一种情况，以方便我们在 Windows 中使用工具远程连接服务器数据库：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">client</span><span class="token punctuation">]</span></span><span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">3306</span><span class="token key attr-name">socket</span><span class="token punctuation">=</span><span class="token value attr-value">/tmp/mysql.sock</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span><span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">3306</span><span class="token key attr-name">socket</span><span class="token punctuation">=</span><span class="token value attr-value">/tmp/mysql.sock</span><span class="token key attr-name">key_buffer_size</span><span class="token punctuation">=</span><span class="token value attr-value">16M</span><span class="token key attr-name">max_allowed_packet</span><span class="token punctuation">=</span><span class="token value attr-value">128M</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqldump</span><span class="token punctuation">]</span></span>quick<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我们要使用 root 账户连接，所以需要了解一下 MySQL 中账户访问的相关知识：</p><ul><li><p>mysql 中账户名由两部分组成 ‘user_name‘@’host_name’</p></li><li><p>在 MySQL 中，不仅要指定谁可以连接，还要指定可以从什么地方进行连接，这意味着，可以有拥有相同名字、但会从不同位置连接服务器的两个用户</p><p>进入 MySQL 命令行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">use mysql<span class="token punctuation">;</span><span class="token keyword">select</span> user, <span class="token function">host</span> from user<span class="token punctuation">;</span><span class="token comment"># 可以看到 root 的 host 是 localhost</span><span class="token comment"># 这意味着 root 用户只能从本机访问 mysql 服务</span><span class="token comment"># 我们现在想在远程访问就需要做一些修改</span><span class="token comment"># 为了方便，我这里直接将 访问地址 改为通配符 % ，允许任何地方连接</span><span class="token comment"># 如果是实际的服务器，可能会带来风险，请视实际情况而定</span>update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token string">'%'</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span class="token comment"># 刷新权限</span>flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3、开放端口和服务"><a href="#3、开放端口和服务" class="headerlink" title="3、开放端口和服务"></a>3、开放端口和服务</h3><p>由于 centos 7 拥有防火墙，如果我们想要远程访问 MySQL 服务，就需要开放相应的端口和服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 最简单的情况，关闭防火墙，并禁用它</span>systemctl stop firewalldsystemctl disable firewalld<span class="token comment"># 安全的情况</span><span class="token comment"># 我们在 my.cnf 中指定了MySQL使用的端口</span><span class="token comment"># 开发端口</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp --permanent<span class="token comment"># 开放服务</span>firewall-cmd --zone<span class="token operator">=</span>public --add-service<span class="token operator">=</span>mysql --permanent<span class="token comment"># 重新加载</span>firewall-cmd --reload<span class="token comment"># 查看结果</span>firewall-cmd --list-portfirewall-cmd --list-service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、测试远程连接"><a href="#4、测试远程连接" class="headerlink" title="4、测试远程连接"></a>4、测试远程连接</h3><p>自己使用工具进行远程连接测试</p><h2 id="三、自定义安装"><a href="#三、自定义安装" class="headerlink" title="三、自定义安装"></a>三、自定义安装</h2><h3 id="1、命令"><a href="#1、命令" class="headerlink" title="1、命令"></a>1、命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum -c /etc/yum --releasever<span class="token operator">=</span>/ --installroot<span class="token operator">=</span>/usr/local/mysql_8.0 -y <span class="token function">install</span> mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我在这里安装到 <code>/usr/local/mysql_8.0</code> 下面，查看目录后可以发现，在该目录下的所有目录和根路径下面的一样，下面列举出常用目录：</p><ul><li>可以发现 <code>mysql_8.0/bin/mysql</code> 和 <code>mysql_8.0/usr/bin/mysql</code>，以及 <code>mysql_8.0/sbin/mysqld</code> 和 <code>mysql_8.0/usr/sbin/mysqld</code>，都是 <strong>硬链接</strong> 的关系</li><li>一些常用的命令现在感觉有些冗余，可见虽然使用了 安装路径 后便于管理，但是使用起来感觉不太方便，所以还是推荐默认安装</li><li>而且现在还需要配置环境变量</li></ul><h3 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h3><p>设置 mysql <strong>系统环境变量</strong></p><p>Linux 推荐我们在 <code>/etc/profile.d/</code> 目录下通过编写 mysql.sh 来配置其环境变量，因为 Linux 启动后会读取  <code>/etc/profile</code>  文件，然后根据其中的内容又会调用 <code>/etc/profile.d/</code> 目录下的脚本文件，但是又要花时间学习 shell 编写脚本。为了方便还是直接在 <code>/etc/profile</code> 中编写环境变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果 /etc/profile 不可以编写，先更改权限 chmod u+w /etc/profile</span><span class="token comment"># 最后一行加上</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/mysql_8.0/bin:/usr/local/mysql_8.0/sbin<span class="token comment"># 使其生效</span><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、关于配置文件"><a href="#3、关于配置文件" class="headerlink" title="3、关于配置文件"></a>3、关于配置文件</h3><p>Linux 中的 MySQL 配置文件的名称为 <code>my.cnf</code>，采用自定义安装，可以在 <code>/etc/my.cnf</code> 和 <code>/usr/local/mysql_8.0/etc/my.cnf</code> 找到，我们只需关注 mysql 安装路径下的配置文件就好了。</p><p>感兴趣可以到官网看看：<a href="https://dev.mysql.com/doc/refman/8.0/en/server-configuration-defaults.html">https://dev.mysql.com/doc/refman/8.0/en/server-configuration-defaults.html</a></p><h3 id="4、自定义路径的坑"><a href="#4、自定义路径的坑" class="headerlink" title="4、自定义路径的坑"></a>4、自定义路径的坑</h3><p>可能会遇到这个错误：</p><p><code>Cannot find a valid baseurl for repo: base/$releasever/x86_64</code></p><ul><li><strong>这里是由于我指定了安装路径但是没有指定内核版本导致的问题，加上 –releasever=/ 就好了，当然了解一下怎么换源也不错</strong></li><li>**在虚拟机中测试的时候，由于我设置静态 ip 的时候配置 dns 没有正确配置，也报了这个错，正确配置应该是这样的 ** <code>DNS1=114.114.114.114</code>，第二个 DNS2 可加可不加，记住要加 DNS1， OvO</li></ul><p>现在尝试配置其他源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 可以先查看默认的源</span><span class="token function">cat</span> /etc/yum.repos.d/CentOS-Base.repo <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>base<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Base<span class="token assign-left variable">mirrorlist</span><span class="token operator">=</span>http://mirrorlist.centos.org/?release<span class="token operator">=</span><span class="token variable">$releasever</span><span class="token operator">&amp;</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token variable">$basearch</span><span class="token operator">&amp;</span><span class="token assign-left variable">repo</span><span class="token operator">=</span>os<span class="token operator">&amp;</span><span class="token assign-left variable">infra</span><span class="token operator">=</span><span class="token variable">$infra</span><span class="token comment">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span class="token comment">#released updates </span><span class="token punctuation">[</span>updates<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Updates<span class="token assign-left variable">mirrorlist</span><span class="token operator">=</span>http://mirrorlist.centos.org/?release<span class="token operator">=</span><span class="token variable">$releasever</span><span class="token operator">&amp;</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token variable">$basearch</span><span class="token operator">&amp;</span><span class="token assign-left variable">repo</span><span class="token operator">=</span>updates<span class="token operator">&amp;</span><span class="token assign-left variable">infra</span><span class="token operator">=</span><span class="token variable">$infra</span><span class="token comment">#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span class="token comment">#additional packages that may be useful</span><span class="token punctuation">[</span>extras<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Extras<span class="token assign-left variable">mirrorlist</span><span class="token operator">=</span>http://mirrorlist.centos.org/?release<span class="token operator">=</span><span class="token variable">$releasever</span><span class="token operator">&amp;</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token variable">$basearch</span><span class="token operator">&amp;</span><span class="token assign-left variable">repo</span><span class="token operator">=</span>extras<span class="token operator">&amp;</span><span class="token assign-left variable">infra</span><span class="token operator">=</span><span class="token variable">$infra</span><span class="token comment">#baseurl=http://mirror.centos.org/centos/$releasever/extras/$basearch/</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span class="token comment">#additional packages that extend functionality of existing packages</span><span class="token punctuation">[</span>centosplus<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Plus<span class="token assign-left variable">mirrorlist</span><span class="token operator">=</span>http://mirrorlist.centos.org/?release<span class="token operator">=</span><span class="token variable">$releasever</span><span class="token operator">&amp;</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token variable">$basearch</span><span class="token operator">&amp;</span><span class="token assign-left variable">repo</span><span class="token operator">=</span>centosplus<span class="token operator">&amp;</span><span class="token assign-left variable">infra</span><span class="token operator">=</span><span class="token variable">$infra</span><span class="token comment">#baseurl=http://mirror.centos.org/centos/$releasever/centosplus/$basearch/</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单分析以下每个源（源都以 [] 括住）中主要的配置信息：以 [base] 为例</p><ul><li>[base] 源</li><li>name：说明当前软件源的意义，不重要</li><li>mirrorlist：列出这个软件源可以使用的镜像站，如果不想使用，可以注释掉</li><li><strong>baseurl</strong>：这个最重要，后面接的是这个软件源的实际地址，mirrorlist 是 YUM 程序自动识别镜像站，baseurl 则是指定固定的软件源网址</li><li>enable=1：让该软件源被启用，不想启用就设置为 0</li><li>gpgcheck=1：指定要查看 RPM 的数字签名</li><li>gpgkey=xxx：就是数字签名的公钥文件所在位置，使用默认值即可</li></ul><p>例如改为阿里云源：</p><p>官网：<a href="http://mirrors.aliyun.com/repo/">http://mirrors.aliyun.com/repo/</a></p><p>我们可以下载官方的 yum 源配置，windows 下直接下载文件，或者在 Linux 的图形界面访问官网。</p><p>我习惯于使用 命令行 ，所以使用如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 有个插件 fastestmirror 是用于测试当有多个源时选择速度最快的那个，可禁可不禁</span><span class="token comment"># 我们对 yum 的源配置文件做备份就好了</span><span class="token function">cp</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<span class="token comment"># 获取 阿里云 的 repo，直接覆盖就好了，注意内核版本</span><span class="token function">wget</span> -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<span class="token comment"># Tip：我没有用这种方法，而是在原来的文件中直接将所有源禁用，设置 enable=0</span><span class="token comment"># 然后再去阿里云对应的 repo 文件中复制所有配置源信息到目标文件中</span><span class="token comment"># 最后启用 阿里云 的源，设置 enable=1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后清除缓存再生成缓存：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清除缓存</span>yum clean all<span class="token function">rm</span> -rf /var/cache/yum<span class="token comment"># 重新生成缓存</span>yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、自定义安装配置"><a href="#5、自定义安装配置" class="headerlink" title="5、自定义安装配置"></a>5、自定义安装配置</h3><p>参考官网：<a href="https://dev.mysql.com/doc/refman/8.0/en/data-directory-initialization.html">https://dev.mysql.com/doc/refman/8.0/en/data-directory-initialization.html</a></p><p>官方推荐创建 mysql 组 和 用户 来管理 mysql，允许该用户连接数据库服务器，远程安全连接可以使用 <code>mysql_ssl-rsa_setup</code> 程序创建默认的 SSL 和 RSA 文件。不过我们是学习就算了</p><p>tip：在MySQL 8.0中，默认的身份验证插件已从更改 <code>mysql_native_password</code>为 <code>caching_sha2_password</code>，并且 默认情况下<code>'root'@'localhost'</code>使用管理帐户<code>caching_sha2_password</code>。</p><h2 id="四、配置文件"><a href="#四、配置文件" class="headerlink" title="四、配置文件"></a>四、配置文件</h2><p>my.conf 需要慢慢调试找到最优配置：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">client</span><span class="token punctuation">]</span></span>    <span class="token key attr-name">port</span> <span class="token punctuation">=</span> <span class="token value attr-value">3306</span><span class="token key attr-name">socket</span> <span class="token punctuation">=</span> <span class="token value attr-value">/tmp/mysql.sock</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span><span class="token key attr-name">user</span> <span class="token punctuation">=</span> <span class="token value attr-value">mysql    --- 表示MySQL的管理用户</span><span class="token key attr-name">port</span> <span class="token punctuation">=</span> <span class="token value attr-value">3306    --- 端口</span><span class="token key attr-name">socket</span> <span class="token punctuation">=</span> <span class="token value attr-value">/tmp/mysql.sock    -- 启动的sock文件</span><span class="token key attr-name">log-bin</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql-bin</span><span class="token key attr-name">basedir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/usr/local/mysql</span><span class="token key attr-name">datadir</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/</span><span class="token key attr-name">pid-file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql.pid</span><span class="token key attr-name">user</span> <span class="token punctuation">=</span> <span class="token value attr-value">mysql</span><span class="token key attr-name">bind-address</span> <span class="token punctuation">=</span> <span class="token value attr-value">0.0.0.0</span><span class="token key attr-name">server-id</span> <span class="token punctuation">=</span> <span class="token value attr-value">1 #表示是本机的序号为1,一般来讲就是master的意思</span>skip-name-resolve<span class="token comment"># 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，</span><span class="token comment"># 则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求</span><span class="token comment">#skip-networking</span><span class="token key attr-name">back_log</span> <span class="token punctuation">=</span> <span class="token value attr-value">600</span><span class="token comment"># MySQL能有的连接数量。当主要MySQL线程在一个很短时间内得到非常多的连接请求，这就起作用，</span><span class="token comment"># 然后主线程花些时间(尽管很短)检查连接并且启动一个新线程。back_log值指出在MySQL暂时停止回答新请求之前的短时间内多少个请求可以被存在堆栈中。</span><span class="token comment"># 如果期望在一个短时间内有很多连接，你需要增加它。也就是说，如果MySQL的连接数据达到max_connections时，新来的请求将会被存在堆栈中，</span><span class="token comment"># 以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源。</span><span class="token comment"># 另外，这值（back_log）限于您的操作系统对到来的TCP/IP连接的侦听队列的大小。</span><span class="token comment"># 你的操作系统在这个队列大小上有它自己的限制（可以检查你的OS文档找出这个变量的最大值），试图设定back_log高于你的操作系统的限制将是无效的。</span><span class="token key attr-name">max_connections</span> <span class="token punctuation">=</span> <span class="token value attr-value">1000</span><span class="token comment"># MySQL的最大连接数，如果服务器的并发连接请求量比较大，建议调高此值，以增加并行连接数量，当然这建立在机器能支撑的情况下，因为如果连接数越多，介于MySQL会为每个连接提供连接缓冲区，就会开销越多的内存，所以要适当调整该值，不能盲目提高设值。可以过'conn%'通配符查看当前状态的连接数量，以定夺该值的大小。</span><span class="token key attr-name">max_connect_errors</span> <span class="token punctuation">=</span> <span class="token value attr-value">6000</span><span class="token comment"># 对于同一主机，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST。</span><span class="token key attr-name">open_files_limit</span> <span class="token punctuation">=</span> <span class="token value attr-value">65535</span><span class="token comment"># MySQL打开的文件描述符限制，默认最小1024;当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，</span><span class="token comment"># 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。</span><span class="token key attr-name">table_open_cache</span> <span class="token punctuation">=</span> <span class="token value attr-value">128</span><span class="token comment"># MySQL每打开一个表，都会读入一些数据到table_open_cache缓存中，当MySQL在这个缓存中找不到相应信息时，才会去磁盘上读取。默认值64</span><span class="token comment"># 假定系统有200个并发连接，则需将此参数设置为200*N(N为每个连接所需的文件描述符数目)；</span><span class="token comment"># 当把table_open_cache设置为很大时，如果系统处理不了那么多文件描述符，那么就会出现客户端失效，连接不上</span><span class="token key attr-name">max_allowed_packet</span> <span class="token punctuation">=</span> <span class="token value attr-value">4M</span><span class="token comment"># 接受的数据包大小；增加该变量的值十分安全，这是因为仅当需要时才会分配额外内存。例如，仅当你发出长查询或MySQLd必须返回大的结果行时MySQLd才会分配更多内存。</span><span class="token comment"># 该变量之所以取较小默认值是一种预防措施，以捕获客户端和服务器之间的错误信息包，并确保不会因偶然使用大的信息包而导致内存溢出。</span><span class="token key attr-name">binlog_cache_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">1M</span><span class="token comment"># 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K</span><span class="token key attr-name">max_heap_table_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment"># 定义了用户可以创建的内存表(memory table)的大小。这个值用来计算内存表的最大行数值。这个变量支持动态改变</span><span class="token key attr-name">tmp_table_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">16M</span><span class="token comment"># MySQL的heap（堆积）表缓冲大小。所有联合在一个DML指令内完成，并且大多数联合甚至可以不用临时表即可以完成。</span><span class="token comment"># 大多数临时表是基于内存的(HEAP)表。具有大的记录长度的临时表 (所有列的长度的和)或包含BLOB列的表存储在硬盘上。</span><span class="token comment"># 如果某个内部heap（堆积）表大小超过tmp_table_size，MySQL可以根据需要自动将内存中的heap表改为基于硬盘的MyISAM表。还可以通过设置tmp_table_size选项来增加临时表的大小。也就是说，如果调高该值，MySQL同时将增加heap表的大小，可达到提高联接查询速度的效果</span><span class="token key attr-name">read_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">2M</span><span class="token comment"># MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。</span><span class="token comment"># 如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能</span><span class="token key attr-name">read_rnd_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment"># MySQL的随机读缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，</span><span class="token comment"># MySQL会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySQL会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大</span><span class="token key attr-name">sort_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment"># MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段。</span><span class="token comment"># 如果不能，可以尝试增加sort_buffer_size变量的大小</span><span class="token key attr-name">join_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment"># 联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享</span><span class="token key attr-name">thread_cache_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8</span><span class="token comment"># 这个值（默认8）表示可以重新利用保存在缓存中线程的数量，当断开连接时如果缓存中还有空间，那么客户端的线程将被放到缓存中，</span><span class="token comment"># 如果线程重新被请求，那么请求将从缓存中读取,如果缓存中是空的或者是新的请求，那么这个线程将被重新创建,如果有很多新的线程，</span><span class="token comment"># 增加这个值可以改善系统性能.通过比较Connections和Threads_created状态的变量，可以看到这个变量的作用。(–&gt;表示要调整的值)</span><span class="token comment"># 根据物理内存设置规则如下：</span><span class="token comment"># 1G  —&gt; 8</span><span class="token comment"># 2G  —&gt; 16</span><span class="token comment"># 3G  —&gt; 32</span><span class="token comment"># 大于3G  —&gt; 64</span><span class="token key attr-name">query_cache_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment">#MySQL的查询缓冲大小（从4.0.1开始，MySQL提供了查询缓冲机制）使用查询缓冲，MySQL将SELECT语句和查询结果存放在缓冲区中，</span><span class="token comment"># 今后对于同样的SELECT语句（区分大小写），将直接从缓冲区中读取结果。根据MySQL用户手册，使用查询缓冲最多可以达到238%的效率。</span><span class="token comment"># 通过检查状态值'Qcache_%'，可以知道query_cache_size设置是否合理：如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，</span><span class="token comment"># 如果Qcache_hits的值也非常大，则表明查询缓冲使用非常频繁，此时需要增加缓冲大小；如果Qcache_hits的值不大，则表明你的查询重复率很低，</span><span class="token comment"># 这种情况下使用查询缓冲反而会影响效率，那么可以考虑不用查询缓冲。此外，在SELECT语句中加入SQL_NO_CACHE可以明确表示不使用查询缓冲</span><span class="token key attr-name">query_cache_limit</span> <span class="token punctuation">=</span> <span class="token value attr-value">2M</span><span class="token comment">#指定单个查询能够使用的缓冲区大小，默认1M</span><span class="token key attr-name">key_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">4M</span><span class="token comment">#指定用于索引的缓冲区大小，增加它可得到更好处理的索引(对所有读和多重写)，到你能负担得起那样多。如果你使它太大，</span><span class="token comment"># 系统将开始换页并且真的变慢了。对于内存在4GB左右的服务器该参数可设置为384M或512M。通过检查状态值Key_read_requests和Key_reads，</span><span class="token comment"># 可以知道key_buffer_size设置是否合理。比例key_reads/key_read_requests应该尽可能的低，</span><span class="token comment"># 至少是1:100，1:1000更好(上述状态值可以使用SHOW STATUS LIKE 'key_read%'获得)。注意：该参数值设置的过大反而会是服务器整体效率降低</span><span class="token key attr-name">ft_min_word_len</span> <span class="token punctuation">=</span> <span class="token value attr-value">4</span><span class="token comment"># 分词词汇最小长度，默认4</span><span class="token key attr-name">transaction_isolation</span> <span class="token punctuation">=</span> <span class="token value attr-value">REPEATABLE-READ</span><span class="token comment"># MySQL支持4种事务隔离级别，他们分别是：</span><span class="token comment"># READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.</span><span class="token comment"># 如没有指定，MySQL默认采用的是REPEATABLE-READ，ORACLE默认的是READ-COMMITTED</span><span class="token key attr-name">log_bin</span> <span class="token punctuation">=</span> <span class="token value attr-value">mysql-bin</span><span class="token key attr-name">binlog_format</span> <span class="token punctuation">=</span> <span class="token value attr-value">mixed</span><span class="token key attr-name">expire_logs_days</span> <span class="token punctuation">=</span> <span class="token value attr-value">30 #超过30天的binlog删除</span><span class="token key attr-name">log_error</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql/mysql-error.log #错误日志路径</span><span class="token key attr-name">slow_query_log</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span><span class="token key attr-name">long_query_time</span> <span class="token punctuation">=</span> <span class="token value attr-value">1 #慢查询时间 超过1秒则为慢查询</span><span class="token key attr-name">slow_query_log_file</span> <span class="token punctuation">=</span> <span class="token value attr-value">/data/mysql/mysql-slow.log</span><span class="token key attr-name">performance_schema</span> <span class="token punctuation">=</span> <span class="token value attr-value">0</span>explicit_defaults_for_timestamp<span class="token comment">#lower_case_table_names = 1 #不区分大小写</span>skip-external-locking #MySQL选项以避免外部锁定。该选项默认开启<span class="token key attr-name">default-storage-engine</span> <span class="token punctuation">=</span> <span class="token value attr-value">InnoDB #默认存储引擎</span><span class="token key attr-name">innodb_file_per_table</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span><span class="token comment"># InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间</span><span class="token comment"># 独立表空间优点：</span><span class="token comment"># 1．每个表都有自已独立的表空间。</span><span class="token comment"># 2．每个表的数据和索引都会存在自已的表空间中。</span><span class="token comment"># 3．可以实现单表在不同的数据库中移动。</span><span class="token comment"># 4．空间可以回收（除drop table操作处，表空不能自已回收）</span><span class="token comment"># 缺点：</span><span class="token comment"># 单表增加过大，如超过100G</span><span class="token comment"># 结论：</span><span class="token comment"># 共享表空间在Insert操作上少有优势。其它都没独立表空间表现好。当启用独立表空间时，请合理调整：innodb_open_files</span><span class="token key attr-name">innodb_open_files</span> <span class="token punctuation">=</span> <span class="token value attr-value">500</span><span class="token comment"># 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300</span><span class="token key attr-name">innodb_buffer_pool_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">64M</span><span class="token comment"># InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.</span><span class="token comment"># 这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.</span><span class="token comment"># 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的80%</span><span class="token comment"># 不要设置过大,否则,由于物理内存的竞争可能导致操作系统的换页颠簸.</span><span class="token comment"># 注意在32位系统上你每个进程可能被限制在 2-3.5G 用户层面内存限制,</span><span class="token comment"># 所以不要设置的太高.</span><span class="token key attr-name">innodb_write_io_threads</span> <span class="token punctuation">=</span> <span class="token value attr-value">4</span><span class="token key attr-name">innodb_read_io_threads</span> <span class="token punctuation">=</span> <span class="token value attr-value">4</span><span class="token comment"># innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4</span><span class="token comment"># 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64</span><span class="token key attr-name">innodb_thread_concurrency</span> <span class="token punctuation">=</span> <span class="token value attr-value">0</span><span class="token comment"># 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量</span><span class="token key attr-name">innodb_purge_threads</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span><span class="token comment"># InnoDB中的清除操作是一类定期回收无用数据的操作。在之前的几个版本中，清除操作是主线程的一部分，这意味着运行时它可能会堵塞其它的数据库操作。</span><span class="token comment"># 从MySQL5.5.X版本开始，该操作运行于独立的线程中,并支持更多的并发数。用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单</span><span class="token comment"># 独线程,默认情况下参数设置为0(不使用单独线程),设置为 1 时表示使用单独的清除线程。建议为1</span><span class="token key attr-name">innodb_flush_log_at_trx_commit</span> <span class="token punctuation">=</span> <span class="token value attr-value">2</span><span class="token comment"># 0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。</span><span class="token comment"># 主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1</span><span class="token comment"># 1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。</span><span class="token comment"># 2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，这要取决于进程的调度。</span><span class="token comment"># 每次事务提交的时候将数据写入事务日志，而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，所以这个写入并不能保证数据已经写入到物理磁盘</span><span class="token comment"># 默认值1是为了保证完整的ACID。当然，你可以将这个配置项设为1以外的值来换取更高的性能，但是在系统崩溃的时候，你将会丢失1秒的数据。</span><span class="token comment"># 设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。InnoDB在做恢复的时候会忽略这个值。</span><span class="token comment"># 总结</span><span class="token comment"># 设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。如果对数据一致性和完整性要求不高，完全可以设为2，如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能</span><span class="token key attr-name">innodb_log_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">2M</span><span class="token comment"># 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间</span><span class="token key attr-name">innodb_log_file_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">32M</span><span class="token comment"># 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间</span><span class="token key attr-name">innodb_log_files_in_group</span> <span class="token punctuation">=</span> <span class="token value attr-value">3</span><span class="token comment"># 为提高性能，MySQL可以以循环方式将日志文件写到多个文件。推荐设置为3</span><span class="token key attr-name">innodb_max_dirty_pages_pct</span> <span class="token punctuation">=</span> <span class="token value attr-value">90</span><span class="token comment"># innodb主线程刷新缓存池中的数据，使脏数据比例小于90%</span><span class="token key attr-name">innodb_lock_wait_timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">120</span> <span class="token comment"># InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒</span><span class="token key attr-name">bulk_insert_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment"># 批量插入缓存大小， 这个参数是针对MyISAM存储引擎来说的。适用于在一次性插入100-1000+条记录时， 提高效率。默认值是8M。可以针对数据量的大小，翻倍增加。</span><span class="token key attr-name">myisam_sort_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token comment"># MyISAM设置恢复表之时使用的缓冲区的尺寸，当在REPAIR TABLE或用CREATE INDEX创建索引或ALTER TABLE过程中排序 MyISAM索引分配的缓冲区</span><span class="token key attr-name">myisam_max_sort_file_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">10G</span><span class="token comment"># 如果临时文件会变得超过索引，不要使用快速排序索引方法来创建一个索引。注释：这个参数以字节的形式给出</span><span class="token key attr-name">myisam_repair_threads</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span><span class="token comment"># 如果该值大于1，在Repair by sorting过程中并行创建MyISAM表索引(每个索引在自己的线程内) </span><span class="token key attr-name">interactive_timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">28800</span><span class="token comment"># 服务器关闭交互式连接前等待活动的秒数。交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。默认值：28800秒（8小时）</span><span class="token key attr-name">wait_timeout</span> <span class="token punctuation">=</span> <span class="token value attr-value">28800</span><span class="token comment"># 服务器关闭非交互连接之前等待活动的秒数。在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，</span><span class="token comment"># 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。参数默认值：28800秒（8小时）</span><span class="token comment"># MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，因此我们希望客户端在连接到MySQL Server处理完相应的操作后，</span><span class="token comment"># 应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，</span><span class="token comment"># 最终肯定会达到MySQL Server的连接上限数，这会报'too many connections'的错误。对于wait_timeout的值设定，应该根据系统的运行情况来判断。</span><span class="token comment"># 在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，</span><span class="token comment"># 可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqldump</span><span class="token punctuation">]</span></span>quick<span class="token key attr-name">max_allowed_packet</span> <span class="token punctuation">=</span> <span class="token value attr-value">16M #服务器发送和接受的最大包长度</span><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">myisamchk</span><span class="token punctuation">]</span></span><span class="token key attr-name">key_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token key attr-name">sort_buffer_size</span> <span class="token punctuation">=</span> <span class="token value attr-value">8M</span><span class="token key attr-name">read_buffer</span> <span class="token punctuation">=</span> <span class="token value attr-value">4M</span><span class="token key attr-name">write_buffer</span> <span class="token punctuation">=</span> <span class="token value attr-value">4M</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7-install-redis</title>
      <link href="/2021/07/06/centos7-install-redis/"/>
      <url>/2021/07/06/centos7-install-redis/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Windows-下安装-Redis"><a href="#一、Windows-下安装-Redis" class="headerlink" title="一、Windows 下安装 Redis"></a>一、Windows 下安装 Redis</h2><p>先去官网下载源文件压缩包，解压到自己创建的指定目录下，建议目录绝对路径中不要出现中文。</p><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>使用 cmd，将 Redis 作为服务安装到 Windows 中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 进入 redis 解压目录下redis-server --service-install redis.windows.conf# 启动服务redis-server --service-start# 停止服务redis-server --service-stop# 卸载服务redis-server --service-uninstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、查看版本"><a href="#2、查看版本" class="headerlink" title="2、查看版本"></a>2、查看版本</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">redis-server --version # 或者 redis-server -vredis-cli --version # 或 redis-cli -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>严格上说：通过　redis-cli 得到的结果应该是redis-cli 的版本，但是 redis-cli 和redis-server，一般都是从同一套源码编译出的。所以应该是一样的。</p><h2 id="二、Linux-中安装-Redis"><a href="#二、Linux-中安装-Redis" class="headerlink" title="二、Linux 中安装 Redis"></a>二、Linux 中安装 Redis</h2><h3 id="1、两种方式"><a href="#1、两种方式" class="headerlink" title="1、两种方式"></a>1、两种方式</h3><ul><li>从官网下载源文件压缩包，然后通过工具或协议上传到 Linux 服务器</li><li>使用 Linux 中的命令工具直接拉取</li></ul><h3 id="2、前置条件"><a href="#2、前置条件" class="headerlink" title="2、前置条件"></a>2、前置条件</h3><ul><li><p>安装 C++ 的编译器：CentOS 中，C 的编译器是 gcc，C++ 的编译器是 g++</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y install gcc-c++# 出现错误，可以多看看 redis 的 ReadMe.md 文件make MALLOC=libc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3、开始安装"><a href="#3、开始安装" class="headerlink" title="3、开始安装"></a>3、开始安装</h3><p>在此之前，我们应该了解 Linux 的各个目录代表的含义。</p><p>我习惯于将自己下载的软件解压并安装到 <code>/usr/local/ </code> 目录下</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 进入目录cd /usr/local# 先到官网看看长期稳定版本的版本号，wget https://download.redis.io/releases/redis-6.2.3.tar.gz# 解压tar xzf redis-6.2.3.tar.gz# 解压后，压缩包可以自己备份以下，以便以后使用，也可以删掉# 进入解压后的目录下，开始编译源文件cd ./redis-6.2.3make# 切换到/usr/local/redis-6.2.3/src目录cd src/# 开始安装 Redismake install# 安装完成之后，我们可以创建两个文件夹用户存放 配置文件 和 常用的命令cd ../mkdir etcmkdir bin# 备份配置文件cp redis.conf ./etc/# 转移常用命令mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-cli redis-server redis-sentinel /usr/local/redis-6.2.3/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、修改配置文件"><a href="#4、修改配置文件" class="headerlink" title="4、修改配置文件"></a>4、修改配置文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 修改配置文件cd ./excvim redis.conf# redis.conf主要修改以下 4 点：# 1.将 daemonize no 改为 daemonize yes，表示需要在后台运行# 2. 将 bind 127.0.0.1 这一行注释掉，如果不需要远程连接服务器，这个可以不用注释，它的意思是只允许本机访问# 3. 将 protect-mode yes 改为 protect-mode no，如果不远程连接则不需要注释# 4. 添加 requirepass 123456 设置密码(默认密码为空)，如果只是在本机测试，也不需要设置密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、启动-Redis-服务并测试"><a href="#5、启动-Redis-服务并测试" class="headerlink" title="5、启动 Redis 服务并测试"></a>5、启动 Redis 服务并测试</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 依据指定配置文件启动 Rediscd /usr/local/redis-6.2.3/binredis-server ../etc/redis.conf# 使用 redis-cli 连接本机 Redis 服务，默认端口 6379redis-cli# 认证后测试auth 123456set name naivekyoget name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>draft-test</title>
      <link href="/2021/07/06/draft-test/"/>
      <url>/2021/07/06/draft-test/</url>
      
        <content type="html"><![CDATA[<h2 id="一、测试草稿-发布"><a href="#一、测试草稿-发布" class="headerlink" title="一、测试草稿-发布"></a>一、测试草稿-发布</h2><p>测试流程：</p><ol><li>创建草稿</li><li>发布草稿</li><li>查看结果</li></ol><h2 id="二、测试修改-发布"><a href="#二、测试修改-发布" class="headerlink" title="二、测试修改-发布"></a>二、测试修改-发布</h2><p>测试流程：</p><ol><li>修改已有文件</li><li>发布</li><li>查看结果</li></ol>]]></content>
      
      
      <categories>
          
          <category> BlogTest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/05/hello-world/"/>
      <url>/2021/07/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
